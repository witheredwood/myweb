import Client from './client';
export declare type Env = 'prod';
export interface Request {
    execute<T, R extends Response>(req: FunctionRequest<T>): Promise<FunctionResponse<R>>;
}
export interface NotifyConfig {
    url: string;
}
export interface Config {
    notify?: NotifyConfig;
    env?: Env;
}
export interface FunctionResponse<R> {
    requestId: string;
    success: boolean;
    result: R;
}
export interface BaseParams {
    $config?: {
        notify?: {
            url?: string;
        };
        env?: Env;
    };
}
export interface FunctionRequest<T> {
    method: string;
    params: T & BaseParams;
}
export interface ServerlessFunction {
    invoke<T, R>(functionName: string, request: FunctionRequest<T>): Promise<FunctionResponse<R>>;
}
export interface Serverless {
    function: ServerlessFunction;
}
export default class CloudKernel extends Client {
    invoker: Serverless;
    config: Config;
    init(mpserverless: Serverless, config?: Config): void;
    getInvokeArgs(method: string, params: {
        [key: string]: any;
    }): FunctionRequest<{
        [key: string]: any;
    }>;
    invoke(openApiName: string, params: {
        [key: string]: any;
    }): Promise<{
        [key: string]: any;
    }>;
    invokeWithPageExe(openApiName: string, params: {
        [key: string]: any;
    }): Promise<string>;
    invokePre(preFunctionName: string, openApiName: string, params: {
        [key: string]: any;
    }): Promise<{
        [key: string]: any;
    }>;
}
