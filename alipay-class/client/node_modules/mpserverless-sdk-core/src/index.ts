import Client from './client';

export type Env = 'prod';

export interface Request {
  execute<T, R extends Response>(req: FunctionRequest<T>): Promise<FunctionResponse<R>>;
}

export interface NotifyConfig {
  url: string;
}

export interface Config {
  notify?: NotifyConfig;
  env?: Env;
}

export interface FunctionResponse<R> {
  requestId: string;
  success: boolean;
  result: R;
}

export interface BaseParams {
  $config?: {
    notify?: {
      url?: string;
    };
    env?: Env;
  };
}

export interface FunctionRequest<T> {
  method: string;
  params: T & BaseParams;
}

export interface ServerlessFunction {
  invoke<T, R>(functionName: string, request: FunctionRequest<T>): Promise<FunctionResponse<R>>;
}

export interface Serverless {
  function: ServerlessFunction;
}

export default class CloudKernel extends Client {
  invoker: Serverless;
  config: Config;

  init(mpserverless: Serverless, config: Config = {}) {
    this.invoker = mpserverless;
    this.config = config;
  }

  getInvokeArgs(method: string, params: {[key: string]: any}): FunctionRequest<{[key: string]: any}> {
    // TODO: 补全出错信息
    if (!this.invoker) {
      throw new Error('invoker is not set, please call init(mpserverless: Serverless, config: Config) first.');
    }
    const {
      notify = null,
      env = null,
    } = this.config;
    const args = {
      method,
      params: {
        $config: <Config>{}, // openapi 的私有参数，默认值 {}
        ...params,
      }
    };
    if (notify && notify.url) {
      args.params.$config.notify = {
        ...notify,
      }
    }
    if (env) {
      args.params.$config.env = env;
    }
    return args;
  }

  async invoke(openApiName: string, params: {[key: string]: any}): Promise<{[key: string]: any}> {
    const args = this.getInvokeArgs(openApiName, params);
    const response = await this.invoker.function.invoke('alipay-openapi', args);
    return response.result;
  }

  async invokeWithPageExe(openApiName: string, params: {[key: string]: any}): Promise<string> {
    const args = this.getInvokeArgs(openApiName, params);
    const response = await this.invoker.function.invoke('alipay-openapi', args);
    return <string> response.result;
  }


  async invokePre(preFunctionName: string, openApiName: string, params: { [key: string]: any }): Promise<{[key: string]: any }> {
    const args = this.getInvokeArgs(openApiName, params);

    // 删除支付宝专用参数
    delete args.params.$config

    const response = await this.invoker.function.invoke(preFunctionName, args);
    return response.result;
  }
}


