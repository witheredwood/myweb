// This file is auto-generated, don't edit it
import CloudKernel from 'mpserverless-sdk-core';
import { Readable } from 'stream';
import * as $tea from '@alicloud/tea-typescript';

export class TradeFundBill extends $tea.Model {
  fundChannel: string;
  bankCode: string;
  amount: string;
  realAmount: string;
  static names(): { [key: string]: string } {
    return {
      fundChannel: 'fundChannel',
      bankCode: 'bankCode',
      amount: 'amount',
      realAmount: 'realAmount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fundChannel: 'string',
      bankCode: 'string',
      amount: 'string',
      realAmount: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TradeSettleDetail extends $tea.Model {
  operationType: string;
  operationSerialNo: string;
  operationDt: string;
  transOut: string;
  transIn: string;
  amount: string;
  static names(): { [key: string]: string } {
    return {
      operationType: 'operationType',
      operationSerialNo: 'operationSerialNo',
      operationDt: 'operationDt',
      transOut: 'transOut',
      transIn: 'transIn',
      amount: 'amount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      operationType: 'string',
      operationSerialNo: 'string',
      operationDt: 'string',
      transOut: 'string',
      transIn: 'string',
      amount: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TradeSettleInfo extends $tea.Model {
  tradeSettleDetailList: TradeSettleDetail[];
  static names(): { [key: string]: string } {
    return {
      tradeSettleDetailList: 'tradeSettleDetailList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tradeSettleDetailList: { 'type': 'array', 'itemType': TradeSettleDetail },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PresetPayToolInfo extends $tea.Model {
  amount: string[];
  assertTypeCode: string;
  static names(): { [key: string]: string } {
    return {
      amount: 'amount',
      assertTypeCode: 'assertTypeCode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      amount: { 'type': 'array', 'itemType': 'string' },
      assertTypeCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AlipayTradeCreateResponse extends $tea.Model {
  code: string;
  msg: string;
  subCode: string;
  subMsg: string;
  outTradeNo: string;
  tradeNo: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      msg: 'msg',
      subCode: 'subCode',
      subMsg: 'subMsg',
      outTradeNo: 'outTradeNo',
      tradeNo: 'tradeNo',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      msg: 'string',
      subCode: 'string',
      subMsg: 'string',
      outTradeNo: 'string',
      tradeNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AlipayTradeQueryResponse extends $tea.Model {
  code: string;
  msg: string;
  subCode: string;
  subMsg: string;
  tradeNo: string;
  outTradeNo: string;
  buyerLogonId: string;
  tradeStatus: string;
  totalAmount: string;
  transCurrency: string;
  settleCurrency: string;
  settleAmount: string;
  payCurrency: string;
  payAmount: string;
  settleTransRate: string;
  transPayRate: string;
  buyerPayAmount: string;
  pointAmount: string;
  invoiceAmount: string;
  sendPayDate: string;
  receiptAmount: string;
  storeId: string;
  terminalId: string;
  fundBillList: TradeFundBill[];
  storeName: string;
  buyerUserId: string;
  chargeAmount: string;
  chargeFlags: string;
  settlementId: string;
  tradeSettleInfo: TradeSettleInfo[];
  authTradePayMode: string;
  buyerUserType: string;
  mdiscountAmount: string;
  discountAmount: string;
  buyerUserName: string;
  subject: string;
  body: string;
  alipaySubMerchantId: string;
  extInfos: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      msg: 'msg',
      subCode: 'subCode',
      subMsg: 'subMsg',
      tradeNo: 'tradeNo',
      outTradeNo: 'outTradeNo',
      buyerLogonId: 'buyerLogonId',
      tradeStatus: 'tradeStatus',
      totalAmount: 'totalAmount',
      transCurrency: 'transCurrency',
      settleCurrency: 'settleCurrency',
      settleAmount: 'settleAmount',
      payCurrency: 'payCurrency',
      payAmount: 'payAmount',
      settleTransRate: 'settleTransRate',
      transPayRate: 'transPayRate',
      buyerPayAmount: 'buyerPayAmount',
      pointAmount: 'pointAmount',
      invoiceAmount: 'invoiceAmount',
      sendPayDate: 'sendPayDate',
      receiptAmount: 'receiptAmount',
      storeId: 'storeId',
      terminalId: 'terminalId',
      fundBillList: 'fundBillList',
      storeName: 'storeName',
      buyerUserId: 'buyerUserId',
      chargeAmount: 'chargeAmount',
      chargeFlags: 'chargeFlags',
      settlementId: 'settlementId',
      tradeSettleInfo: 'tradeSettleInfo',
      authTradePayMode: 'authTradePayMode',
      buyerUserType: 'buyerUserType',
      mdiscountAmount: 'mdiscountAmount',
      discountAmount: 'discountAmount',
      buyerUserName: 'buyerUserName',
      subject: 'subject',
      body: 'body',
      alipaySubMerchantId: 'alipaySubMerchantId',
      extInfos: 'extInfos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      msg: 'string',
      subCode: 'string',
      subMsg: 'string',
      tradeNo: 'string',
      outTradeNo: 'string',
      buyerLogonId: 'string',
      tradeStatus: 'string',
      totalAmount: 'string',
      transCurrency: 'string',
      settleCurrency: 'string',
      settleAmount: 'string',
      payCurrency: 'string',
      payAmount: 'string',
      settleTransRate: 'string',
      transPayRate: 'string',
      buyerPayAmount: 'string',
      pointAmount: 'string',
      invoiceAmount: 'string',
      sendPayDate: 'string',
      receiptAmount: 'string',
      storeId: 'string',
      terminalId: 'string',
      fundBillList: { 'type': 'array', 'itemType': TradeFundBill },
      storeName: 'string',
      buyerUserId: 'string',
      chargeAmount: 'string',
      chargeFlags: 'string',
      settlementId: 'string',
      tradeSettleInfo: { 'type': 'array', 'itemType': TradeSettleInfo },
      authTradePayMode: 'string',
      buyerUserType: 'string',
      mdiscountAmount: 'string',
      discountAmount: 'string',
      buyerUserName: 'string',
      subject: 'string',
      body: 'string',
      alipaySubMerchantId: 'string',
      extInfos: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AlipayTradeRefundResponse extends $tea.Model {
  code: string;
  msg: string;
  subCode: string;
  subMsg: string;
  tradeNo: string;
  outTradeNo: string;
  buyerLogonId: string;
  fundChange: string;
  refundFee: string;
  refundCurrency: string;
  gmtRefundPay: string;
  refundDetailItemList: TradeFundBill[];
  storeName: string;
  buyerUserId: string;
  refundPresetPaytoolList: PresetPayToolInfo[];
  refundSettlementId: string;
  presentRefundBuyerAmount: string;
  presentRefundDiscountAmount: string;
  presentRefundMdiscountAmount: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      msg: 'msg',
      subCode: 'subCode',
      subMsg: 'subMsg',
      tradeNo: 'tradeNo',
      outTradeNo: 'outTradeNo',
      buyerLogonId: 'buyerLogonId',
      fundChange: 'fundChange',
      refundFee: 'refundFee',
      refundCurrency: 'refundCurrency',
      gmtRefundPay: 'gmtRefundPay',
      refundDetailItemList: 'refundDetailItemList',
      storeName: 'storeName',
      buyerUserId: 'buyerUserId',
      refundPresetPaytoolList: 'refundPresetPaytoolList',
      refundSettlementId: 'refundSettlementId',
      presentRefundBuyerAmount: 'presentRefundBuyerAmount',
      presentRefundDiscountAmount: 'presentRefundDiscountAmount',
      presentRefundMdiscountAmount: 'presentRefundMdiscountAmount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      msg: 'string',
      subCode: 'string',
      subMsg: 'string',
      tradeNo: 'string',
      outTradeNo: 'string',
      buyerLogonId: 'string',
      fundChange: 'string',
      refundFee: 'string',
      refundCurrency: 'string',
      gmtRefundPay: 'string',
      refundDetailItemList: { 'type': 'array', 'itemType': TradeFundBill },
      storeName: 'string',
      buyerUserId: 'string',
      refundPresetPaytoolList: { 'type': 'array', 'itemType': PresetPayToolInfo },
      refundSettlementId: 'string',
      presentRefundBuyerAmount: 'string',
      presentRefundDiscountAmount: 'string',
      presentRefundMdiscountAmount: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AlipayTradeCloseResponse extends $tea.Model {
  code: string;
  msg: string;
  subCode: string;
  subMsg: string;
  tradeNo: string;
  outTradeNo: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      msg: 'msg',
      subCode: 'subCode',
      subMsg: 'subMsg',
      tradeNo: 'tradeNo',
      outTradeNo: 'outTradeNo',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      msg: 'string',
      subCode: 'string',
      subMsg: 'string',
      tradeNo: 'string',
      outTradeNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AlipayTradeCancelResponse extends $tea.Model {
  code: string;
  msg: string;
  subCode: string;
  subMsg: string;
  tradeNo: string;
  outTradeNo: string;
  retryFlag: string;
  action: string;
  gmtRefundPay: string;
  refundSettlementId: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      msg: 'msg',
      subCode: 'subCode',
      subMsg: 'subMsg',
      tradeNo: 'tradeNo',
      outTradeNo: 'outTradeNo',
      retryFlag: 'retryFlag',
      action: 'action',
      gmtRefundPay: 'gmtRefundPay',
      refundSettlementId: 'refundSettlementId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      msg: 'string',
      subCode: 'string',
      subMsg: 'string',
      tradeNo: 'string',
      outTradeNo: 'string',
      retryFlag: 'string',
      action: 'string',
      gmtRefundPay: 'string',
      refundSettlementId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}


export default class Client {
  _kernel: CloudKernel;

  constructor(_kernel: CloudKernel) {
    this._kernel = _kernel;
  }


  async create(subject: string, outTradeNo: string, totalAmount: string, buyerId: string): Promise<AlipayTradeCreateResponse> {
    let params : {[key: string ]: any} = {
      subject: subject,
      out_trade_no: outTradeNo,
      total_amount: totalAmount,
      buyer_id: buyerId,
    };
    return $tea.cast<AlipayTradeCreateResponse>(await this._kernel.invoke("alipay.trade.create", params), new AlipayTradeCreateResponse({}));
  }

  async query(tradeNo: string): Promise<AlipayTradeQueryResponse> {
    let params : {[key: string ]: any} = {
      trade_no: tradeNo,
    };
    return $tea.cast<AlipayTradeQueryResponse>(await this._kernel.invoke("alipay.trade.query", params), new AlipayTradeQueryResponse({}));
  }

  async refund(outTradeNo: string, refundAmount: string): Promise<AlipayTradeRefundResponse> {
    let params : {[key: string ]: any} = {
      out_trade_no: outTradeNo,
      refund_amount: refundAmount,
    };
    return $tea.cast<AlipayTradeRefundResponse>(await this._kernel.invoke("alipay.trade.refund", params), new AlipayTradeRefundResponse({}));
  }

  async close(outTradeNo: string): Promise<AlipayTradeCloseResponse> {
    let params : {[key: string ]: any} = {
      out_trade_no: outTradeNo,
    };
    return $tea.cast<AlipayTradeCloseResponse>(await this._kernel.invoke("alipay.trade.close", params), new AlipayTradeCloseResponse({}));
  }

  async cancel(outTradeNo: string): Promise<AlipayTradeCancelResponse> {
    let params : {[key: string ]: any} = {
      out_trade_no: outTradeNo,
    };
    return $tea.cast<AlipayTradeCancelResponse>(await this._kernel.invoke("alipay.trade.cancel", params), new AlipayTradeCancelResponse({}));
  }

}
