// This file is auto-generated, don't edit it
import CloudKernel from 'mpserverless-sdk-core';
import * as $tea from '@alicloud/tea-typescript';

export class BillDetail extends $tea.Model {
  tradeNo: string;
  amount: string;
  status: string;
  partnerId: string;
  partnerName: string;
  bizType: string;
  gmtCreate: string;
  static names(): { [key: string]: string } {
    return {
      tradeNo: 'tradeNo',
      amount: 'amount',
      status: 'status',
      partnerId: 'partnerId',
      partnerName: 'partnerName',
      bizType: 'bizType',
      gmtCreate: 'gmtCreate',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tradeNo: 'string',
      amount: 'string',
      status: 'string',
      partnerId: 'string',
      partnerName: 'string',
      bizType: 'string',
      gmtCreate: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AlipayMarktingExchangevoucherUseResponse extends $tea.Model {
  code: string;
  msg: string;
  subCode: string;
  subMsg: string;
  voucherId: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      msg: 'msg',
      subCode: 'subCode',
      subMsg: 'subMsg',
      voucherId: 'voucherId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      msg: 'string',
      subCode: 'string',
      subMsg: 'string',
      voucherId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AlipayMarketingVoucherSendResponse extends $tea.Model {
  code: string;
  msg: string;
  subCode: string;
  subMsg: string;
  voucherId: string;
  userId: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      msg: 'msg',
      subCode: 'subCode',
      subMsg: 'subMsg',
      voucherId: 'voucherId',
      userId: 'userId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      msg: 'string',
      subCode: 'string',
      subMsg: 'string',
      voucherId: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AlipayMarketingExchangevouherTemplateCreateResponse extends $tea.Model {
  code: string;
  msg: string;
  subCode: string;
  subMsg: string;
  templateId: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      msg: 'msg',
      subCode: 'subCode',
      subMsg: 'subMsg',
      templateId: 'templateId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      msg: 'string',
      subCode: 'string',
      subMsg: 'string',
      templateId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AlipayMarketingVoucherQueryResponse extends $tea.Model {
  code: string;
  msg: string;
  subCode: string;
  subMsg: string;
  name: string;
  voucherId: string;
  userId: string;
  templateId: string;
  gmtActive: string;
  gmtExpired: string;
  totalAmount: string;
  availableAmount: string;
  status: string;
  gmtCreate: string;
  extendInfo: string;
  billDetails: BillDetail[];
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      msg: 'msg',
      subCode: 'subCode',
      subMsg: 'subMsg',
      name: 'name',
      voucherId: 'voucherId',
      userId: 'userId',
      templateId: 'templateId',
      gmtActive: 'gmtActive',
      gmtExpired: 'gmtExpired',
      totalAmount: 'totalAmount',
      availableAmount: 'availableAmount',
      status: 'status',
      gmtCreate: 'gmtCreate',
      extendInfo: 'extendInfo',
      billDetails: 'billDetails',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      msg: 'string',
      subCode: 'string',
      subMsg: 'string',
      name: 'string',
      voucherId: 'string',
      userId: 'string',
      templateId: 'string',
      gmtActive: 'string',
      gmtExpired: 'string',
      totalAmount: 'string',
      availableAmount: 'string',
      status: 'string',
      gmtCreate: 'string',
      extendInfo: 'string',
      billDetails: { 'type': 'array', 'itemType': BillDetail },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}


export default class Client {
  _kernel: CloudKernel;

  constructor(_kernel: CloudKernel) {
    this._kernel = _kernel;
  }


  async create(outBizNo: string, brandName: string, voucherName: string, quantity: number, publishStartTime: string, publishEndTime: string, validPeriod: string, availableTime: string, description: string, extensionInfo: string): Promise<AlipayMarketingExchangevouherTemplateCreateResponse> {
    let params : {[key: string ]: any} = {
      out_biz_no: outBizNo,
      voucher_type: "EXCHANGE_VOUCHER",
      brand_name: brandName,
      voucher_name: voucherName,
      voucher_quantity: quantity,
      publish_start_time: publishStartTime,
      publish_end_time: publishEndTime,
      voucher_valid_period: validPeriod,
      voucher_available_time: availableTime,
      voucher_description: description,
      use_type: "H5",
      extension_info: extensionInfo,
    };
    return $tea.cast<AlipayMarketingExchangevouherTemplateCreateResponse>(await this._kernel.invoke("alipay.marketing.exchangevoucher.template.create", params), new AlipayMarketingExchangevouherTemplateCreateResponse({}));
  }

  async send(templateId: string, userId: string, outBizNo: string): Promise<AlipayMarketingVoucherSendResponse> {
    let params : {[key: string ]: any} = {
      template_id: templateId,
      user_id: userId,
      out_biz_no: outBizNo,
    };
    return $tea.cast<AlipayMarketingVoucherSendResponse>(await this._kernel.invoke("alipay.marketing.voucher.send", params), new AlipayMarketingVoucherSendResponse({}));
  }

  async use(voucherId: string, userId: string, outBizNo: string): Promise<AlipayMarktingExchangevoucherUseResponse> {
    let params : {[key: string ]: any} = {
      voucher_id: voucherId,
      user_id: userId,
      out_biz_no: outBizNo,
    };
    return $tea.cast<AlipayMarktingExchangevoucherUseResponse>(await this._kernel.invoke("alipay.marketing.exchangevoucher.use", params), new AlipayMarktingExchangevoucherUseResponse({}));
  }

  async query(voucherId: string): Promise<AlipayMarketingVoucherQueryResponse> {
    let params : {[key: string ]: any} = {
      voucher_id: voucherId,
    };
    return $tea.cast<AlipayMarketingVoucherQueryResponse>(await this._kernel.invoke("alipay.marketing.voucher.query", params), new AlipayMarketingVoucherQueryResponse({}));
  }

}
