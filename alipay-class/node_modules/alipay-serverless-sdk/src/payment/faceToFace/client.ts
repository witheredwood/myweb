// This file is auto-generated, don't edit it
import CloudKernel from 'mpserverless-sdk-core';
import { Readable } from 'stream';
import * as $tea from '@alicloud/tea-typescript';

export class TradeFundBill extends $tea.Model {
  fundChannel: string;
  bankCode: string;
  amount: string;
  realAmount: string;
  static names(): { [key: string]: string } {
    return {
      fundChannel: 'fundChannel',
      bankCode: 'bankCode',
      amount: 'amount',
      realAmount: 'realAmount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fundChannel: 'string',
      bankCode: 'string',
      amount: 'string',
      realAmount: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VoucherDetail extends $tea.Model {
  id: string;
  name: string;
  type: string;
  amount: string;
  merchantContribute: string;
  otherContribute: string;
  memo: string;
  templateId: string;
  purchaseBuyerContribute: string;
  purchaseMerchantContribute: string;
  purchaseAntContribute: string;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      name: 'name',
      type: 'type',
      amount: 'amount',
      merchantContribute: 'merchantContribute',
      otherContribute: 'otherContribute',
      memo: 'memo',
      templateId: 'templateId',
      purchaseBuyerContribute: 'purchaseBuyerContribute',
      purchaseMerchantContribute: 'purchaseMerchantContribute',
      purchaseAntContribute: 'purchaseAntContribute',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'string',
      name: 'string',
      type: 'string',
      amount: 'string',
      merchantContribute: 'string',
      otherContribute: 'string',
      memo: 'string',
      templateId: 'string',
      purchaseBuyerContribute: 'string',
      purchaseMerchantContribute: 'string',
      purchaseAntContribute: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AlipayTradePayResponse extends $tea.Model {
  code: string;
  msg: string;
  subCode: string;
  subMsg: string;
  tradeNo: string;
  outTradeNo: string;
  buyerLogonId: string;
  settleAmount: string;
  payCurrency: string;
  payAmount: string;
  settleTransRate: string;
  transPayRate: string;
  totalAmount: string;
  transCurrency: string;
  settleCurrency: string;
  receiptAmount: string;
  buyerPayAmount: string;
  pointAmount: string;
  invoiceAmount: string;
  gmtPayment: string;
  fundBillList: TradeFundBill[];
  cardBalance: string;
  storeName: string;
  buyerUserId: string;
  discountGoodsDetail: string;
  voucherDetailList: VoucherDetail[];
  advanceAmount: string;
  authTradePayMode: string;
  chargeAmount: string;
  chargeFlags: string;
  settlementId: string;
  businessParams: string;
  buyerUserType: string;
  mdiscountAmount: string;
  discountAmount: string;
  buyerUserName: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      msg: 'msg',
      subCode: 'subCode',
      subMsg: 'subMsg',
      tradeNo: 'tradeNo',
      outTradeNo: 'outTradeNo',
      buyerLogonId: 'buyerLogonId',
      settleAmount: 'settleAmount',
      payCurrency: 'payCurrency',
      payAmount: 'payAmount',
      settleTransRate: 'settleTransRate',
      transPayRate: 'transPayRate',
      totalAmount: 'totalAmount',
      transCurrency: 'transCurrency',
      settleCurrency: 'settleCurrency',
      receiptAmount: 'receiptAmount',
      buyerPayAmount: 'buyerPayAmount',
      pointAmount: 'pointAmount',
      invoiceAmount: 'invoiceAmount',
      gmtPayment: 'gmtPayment',
      fundBillList: 'fundBillList',
      cardBalance: 'cardBalance',
      storeName: 'storeName',
      buyerUserId: 'buyerUserId',
      discountGoodsDetail: 'discountGoodsDetail',
      voucherDetailList: 'voucherDetailList',
      advanceAmount: 'advanceAmount',
      authTradePayMode: 'authTradePayMode',
      chargeAmount: 'chargeAmount',
      chargeFlags: 'chargeFlags',
      settlementId: 'settlementId',
      businessParams: 'businessParams',
      buyerUserType: 'buyerUserType',
      mdiscountAmount: 'mdiscountAmount',
      discountAmount: 'discountAmount',
      buyerUserName: 'buyerUserName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      msg: 'string',
      subCode: 'string',
      subMsg: 'string',
      tradeNo: 'string',
      outTradeNo: 'string',
      buyerLogonId: 'string',
      settleAmount: 'string',
      payCurrency: 'string',
      payAmount: 'string',
      settleTransRate: 'string',
      transPayRate: 'string',
      totalAmount: 'string',
      transCurrency: 'string',
      settleCurrency: 'string',
      receiptAmount: 'string',
      buyerPayAmount: 'string',
      pointAmount: 'string',
      invoiceAmount: 'string',
      gmtPayment: 'string',
      fundBillList: { 'type': 'array', 'itemType': TradeFundBill },
      cardBalance: 'string',
      storeName: 'string',
      buyerUserId: 'string',
      discountGoodsDetail: 'string',
      voucherDetailList: { 'type': 'array', 'itemType': VoucherDetail },
      advanceAmount: 'string',
      authTradePayMode: 'string',
      chargeAmount: 'string',
      chargeFlags: 'string',
      settlementId: 'string',
      businessParams: 'string',
      buyerUserType: 'string',
      mdiscountAmount: 'string',
      discountAmount: 'string',
      buyerUserName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}


export default class Client {
  _kernel: CloudKernel;

  constructor(_kernel: CloudKernel) {
    this._kernel = _kernel;
  }


  async pay(subject: string, outTradeNo: string, totalAmount: string, authCode: string): Promise<AlipayTradePayResponse> {
    let params : {[key: string ]: any} = {
      subject: subject,
      out_trade_no: outTradeNo,
      total_amount: totalAmount,
      auth_code: authCode,
      scene: "bar_code",
    };
    return $tea.cast<AlipayTradePayResponse>(await this._kernel.invoke("alipay.trade.pay", params), new AlipayTradePayResponse({}));
  }

}
