import * as $CloudKernel from 'mpserverless-sdk-core';
import * as $tea from '@alicloud/tea-typescript';
export declare class AlipaySecurityRiskContentDetectResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    action: string;
    keywords: string[];
    uniqueId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlipayOpenAppQrcodeCreateResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    qrCodeUrl: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlipayUserCertifyInitResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    certifyId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlipayUserCertifyParam extends $tea.Model {
    identity_type: string;
    cert_type: string;
    cert_name: string;
    cert_no: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlipayUserCertifyMerchantConfig extends $tea.Model {
    return_url: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlipayUserCertifyResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    url: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlipayUserCertifyQueryResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    passed: string;
    identityInfo: string;
    materialInfo: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HuabeiConfig extends $tea.Model {
    hb_fq_num: string;
    hb_fq_seller_percent: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloudFunctionRedpackageResult extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    resultObj?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlipayTradeCreateResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    outTradeNo: string;
    tradeNo: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlipayTradeRefundResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    tradeNo: string;
    outTradeNo: string;
    buyerLogonId: string;
    fundChange: string;
    refundFee: string;
    refundCurrency: string;
    gmtRefundPay: string;
    refundDetailItemList: TradeFundBill[];
    storeName: string;
    buyerUserId: string;
    refundPresetPaytoolList: PresetPayToolInfo[];
    refundSettlementId: string;
    presentRefundBuyerAmount: string;
    presentRefundDiscountAmount: string;
    presentRefundMdiscountAmount: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PresetPayToolInfo extends $tea.Model {
    amount: string[];
    assertTypeCode: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TradeFundBill extends $tea.Model {
    fundChannel: string;
    bankCode: string;
    amount: string;
    realAmount: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TradeSettleDetail extends $tea.Model {
    operationType: string;
    operationSerialNo: string;
    operationDt: string;
    transOut: string;
    transIn: string;
    amount: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TradeSettleInfo extends $tea.Model {
    tradeSettleDetailList: TradeSettleDetail[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlipayTradeQueryResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    tradeNo: string;
    outTradeNo: string;
    buyerLogonId: string;
    tradeStatus: string;
    totalAmount: string;
    transCurrency: string;
    settleCurrency: string;
    settleAmount: string;
    payCurrency: string;
    payAmount: string;
    settleTransRate: string;
    transPayRate: string;
    buyerPayAmount: string;
    pointAmount: string;
    invoiceAmount: string;
    sendPayDate: string;
    receiptAmount: string;
    storeId: string;
    terminalId: string;
    fundBillList: TradeFundBill[];
    storeName: string;
    buyerUserId: string;
    chargeAmount: string;
    chargeFlags: string;
    settlementId: string;
    tradeSettleInfo: TradeSettleInfo[];
    authTradePayMode: string;
    buyerUserType: string;
    mdiscountAmount: string;
    discountAmount: string;
    buyerUserName: string;
    subject: string;
    body: string;
    alipaySubMerchantId: string;
    extInfos: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlipayAuthTokenResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    userId: string;
    accessToken: string;
    expiresIn: number;
    refreshToken: string;
    reExpiresIn: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class Participant extends $tea.Model {
    identity: string;
    identity_type: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlipayTransferResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    outBizNo: string;
    orderId: string;
    payFundOrderId: string;
    status: string;
    transDate: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlipayTransferQueryResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    orderId: string;
    payFundOrderId: string;
    outBizNo: string;
    transAmount: string;
    status: string;
    payDate: string;
    arrivalTimeEnd: string;
    orderFee: string;
    errorCode: string;
    failReason: string;
    deductBillInfo: string;
    transferBillInfo: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlipayAccountQueryResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    availableAmount: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlipayTemplateMsgResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlipayFundAuthFreezeResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    authNo: string;
    outOrderNo: string;
    operationId: string;
    outRequestNo: string;
    amount: string;
    status: string;
    payerUserId: string;
    gmtTrans: string;
    preAuthType: string;
    creditAmount: string;
    fundAmount: string;
    transCurrency: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlipayFundAuthUnfreezeResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    authNo: string;
    outOrderNo: string;
    operationId: string;
    outRequestNo: string;
    amount: string;
    status: string;
    gmtTrans: string;
    creditAmount: string;
    fundAmount: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlipayFundAuthCancelResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    authNo: string;
    outOrderNo: string;
    operationId: string;
    outRequestNo: string;
    action: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class VoucherDetail extends $tea.Model {
    id: string;
    name: string;
    type: string;
    amount: string;
    merchantContribute: string;
    otherContribute: string;
    memo: string;
    templateId: string;
    purchaseBuyerContribute: string;
    purchaseMerchantContribute: string;
    purchaseAntContribute: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlipayTradePayResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    tradeNo: string;
    outTradeNo: string;
    buyerLogonId: string;
    settleAmount: string;
    payCurrency: string;
    payAmount: string;
    settleTransRate: string;
    transPayRate: string;
    totalAmount: string;
    transCurrency: string;
    settleCurrency: string;
    receiptAmount: string;
    buyerPayAmount: string;
    pointAmount: string;
    invoiceAmount: string;
    gmtPayment: string;
    fundBillList: TradeFundBill[];
    cardBalance: string;
    storeName: string;
    buyerUserId: string;
    discountGoodsDetail: string;
    voucherDetailList: VoucherDetail[];
    advanceAmount: string;
    authTradePayMode: string;
    chargeAmount: string;
    chargeFlags: string;
    settlementId: string;
    businessParams: string;
    buyerUserType: string;
    mdiscountAmount: string;
    discountAmount: string;
    buyerUserName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlipayFundAuthQueryResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    authNo: string;
    outOrderNo: string;
    totalFreezeAmount: string;
    restAmount: string;
    totalPayAmount: string;
    orderTitle: string;
    payerLogonId: string;
    payerUserId: string;
    extraParam: string;
    operationId: string;
    outRequestNo: string;
    amount: string;
    operationType: string;
    status: string;
    remark: string;
    gmtCreate: string;
    gmtTrans: string;
    preAuthType: string;
    transCurrency: string;
    totalFreezeCreditAmount: string;
    totalFreezeFundAmount: string;
    totalPayCreditAmount: string;
    totalPayFundAmount: string;
    restCreditAmount: string;
    restFundAmount: string;
    creditAmount: string;
    fundAmount: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendSmsResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    RequestId: string;
    Code: string;
    Message: string;
    BizId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendBatchSmsResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    RequestId: string;
    Code: string;
    Message: string;
    BizId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendDetailsResponse extends $tea.Model {
    code: string;
    msg: string;
    subCode: string;
    subMsg: string;
    RequestId: string;
    Code: string;
    Message: string;
    TotalCount: number;
    SmsSendDetailDTO: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client {
    constructor(config: $CloudKernel.Config);
    detectContent(content: string): Promise<AlipaySecurityRiskContentDetectResponse>;
    createQrcodeUrl(urlParam: string, queryParam: string, describe: string): Promise<AlipayOpenAppQrcodeCreateResponse>;
    userCertifyInit(outerOrderNo: string, bizCode: string, identityParam: AlipayUserCertifyParam, merchantConfig: AlipayUserCertifyMerchantConfig): Promise<AlipayUserCertifyInitResponse>;
    userCertify(certifyId: string): Promise<AlipayUserCertifyResponse>;
    userCertifyQuery(certifyId: string): Promise<AlipayUserCertifyQueryResponse>;
    redTransfer(params: {
        [key: string]: any;
    }): Promise<CloudFunctionRedpackageResult>;
    tradeCreate(subject: string, outTradeNo: string, totalAmount: string, buyerId: string): Promise<AlipayTradeCreateResponse>;
    tradeRefund(outTradeNo: string, refundAmount: string, outRequestNo: string, refundReason: string): Promise<AlipayTradeRefundResponse>;
    tradeQuery(tradeNo: string): Promise<AlipayTradeQueryResponse>;
    tradeCreateWithHuabei(subject: string, outTradeNo: string, totalAmount: string, buyerId: string, huabeiConfig: HuabeiConfig): Promise<AlipayTradeCreateResponse>;
    getAuthTokenWithAuthcode(code: string): Promise<AlipayAuthTokenResponse>;
    getAuthTokenWithRefreshtoken(refreshToken: string): Promise<AlipayAuthTokenResponse>;
    fundTransfer(outBizNo: string, transAmount: string, productCode: string, orderTitle: string, payee_Info: Participant): Promise<AlipayTransferResponse>;
    fundTransferQuery(productCode: string, payFundOrderId: string): Promise<AlipayTransferQueryResponse>;
    fundAccountQuery(alipayUserId: string): Promise<AlipayAccountQueryResponse>;
    sendTemplateMsg(toUserId: string, formId: string, userTemplateId: string, page: string, data: string): Promise<AlipayTemplateMsgResponse>;
    fundAuthFreeze(outOrderNo: string, outRequestNo: string, orderTitle: string, amount: string, payeeUserId: string): Promise<AlipayFundAuthFreezeResponse>;
    tradePay(subject: string, outTradeNo: string, totalAmount: string, authCode: string): Promise<AlipayTradePayResponse>;
    fundAuthUnfreeze(authNo: string, outRequestNo: string, amount: string, remark: string): Promise<AlipayFundAuthUnfreezeResponse>;
    fundAuthCancel(authNo: string, outOrderNo: string, outRequestNo: string, remark: string): Promise<AlipayFundAuthCancelResponse>;
    fundAuthQuery(authNo: string, outOrderNo: string, outRequestNo: string): Promise<AlipayFundAuthQueryResponse>;
    sendSms(phoneNumbers: string, signName: string, templateCode: string): Promise<SendSmsResponse>;
    sendBatchSms(phoneNumberJson: {
        [key: string]: any;
    }, signNameJson: {
        [key: string]: any;
    }, templateCode: string, templateParamJson: {
        [key: string]: any;
    }): Promise<SendBatchSmsResponse>;
    querySendDetails(phoneNumber: string, sendDate: string, pageSize: number, currentPage: number): Promise<QuerySendDetailsResponse>;
    querySendDetailsWithBizid(phoneNumber: string, sendDate: string, pageSize: number, currentPage: number, bizId: string): Promise<QuerySendDetailsResponse>;
}
