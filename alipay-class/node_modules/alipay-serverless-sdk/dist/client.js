"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
const mpserverless_sdk_core_1 = __importDefault(require("mpserverless-sdk-core"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AlipaySecurityRiskContentDetectResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            action: 'action',
            keywords: 'keywords',
            uniqueId: 'uniqueId',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            action: 'string',
            keywords: { 'type': 'array', 'itemType': 'string' },
            uniqueId: 'string',
        };
    }
}
exports.AlipaySecurityRiskContentDetectResponse = AlipaySecurityRiskContentDetectResponse;
class AlipayOpenAppQrcodeCreateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            qrCodeUrl: 'qrCodeUrl',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            qrCodeUrl: 'string',
        };
    }
}
exports.AlipayOpenAppQrcodeCreateResponse = AlipayOpenAppQrcodeCreateResponse;
class AlipayUserCertifyInitResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            certifyId: 'certifyId',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            certifyId: 'string',
        };
    }
}
exports.AlipayUserCertifyInitResponse = AlipayUserCertifyInitResponse;
class AlipayUserCertifyParam extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            identity_type: 'identity_type',
            cert_type: 'cert_type',
            cert_name: 'cert_name',
            cert_no: 'cert_no',
        };
    }
    static types() {
        return {
            identity_type: 'string',
            cert_type: 'string',
            cert_name: 'string',
            cert_no: 'string',
        };
    }
}
exports.AlipayUserCertifyParam = AlipayUserCertifyParam;
class AlipayUserCertifyMerchantConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            return_url: 'return_url',
        };
    }
    static types() {
        return {
            return_url: 'string',
        };
    }
}
exports.AlipayUserCertifyMerchantConfig = AlipayUserCertifyMerchantConfig;
class AlipayUserCertifyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            url: 'url',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            url: 'string',
        };
    }
}
exports.AlipayUserCertifyResponse = AlipayUserCertifyResponse;
class AlipayUserCertifyQueryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            passed: 'passed',
            identityInfo: 'identityInfo',
            materialInfo: 'materialInfo',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            passed: 'string',
            identityInfo: 'string',
            materialInfo: 'string',
        };
    }
}
exports.AlipayUserCertifyQueryResponse = AlipayUserCertifyQueryResponse;
class HuabeiConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hb_fq_num: 'hb_fq_num',
            hb_fq_seller_percent: 'hb_fq_seller_percent',
        };
    }
    static types() {
        return {
            hb_fq_num: 'string',
            hb_fq_seller_percent: 'string',
        };
    }
}
exports.HuabeiConfig = HuabeiConfig;
class CloudFunctionRedpackageResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            resultObj: 'resultObj',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            resultObj: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.CloudFunctionRedpackageResult = CloudFunctionRedpackageResult;
class AlipayTradeCreateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            outTradeNo: 'outTradeNo',
            tradeNo: 'tradeNo',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            outTradeNo: 'string',
            tradeNo: 'string',
        };
    }
}
exports.AlipayTradeCreateResponse = AlipayTradeCreateResponse;
class AlipayTradeRefundResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            tradeNo: 'tradeNo',
            outTradeNo: 'outTradeNo',
            buyerLogonId: 'buyerLogonId',
            fundChange: 'fundChange',
            refundFee: 'refundFee',
            refundCurrency: 'refundCurrency',
            gmtRefundPay: 'gmtRefundPay',
            refundDetailItemList: 'refundDetailItemList',
            storeName: 'storeName',
            buyerUserId: 'buyerUserId',
            refundPresetPaytoolList: 'refundPresetPaytoolList',
            refundSettlementId: 'refundSettlementId',
            presentRefundBuyerAmount: 'presentRefundBuyerAmount',
            presentRefundDiscountAmount: 'presentRefundDiscountAmount',
            presentRefundMdiscountAmount: 'presentRefundMdiscountAmount',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            tradeNo: 'string',
            outTradeNo: 'string',
            buyerLogonId: 'string',
            fundChange: 'string',
            refundFee: 'string',
            refundCurrency: 'string',
            gmtRefundPay: 'string',
            refundDetailItemList: { 'type': 'array', 'itemType': TradeFundBill },
            storeName: 'string',
            buyerUserId: 'string',
            refundPresetPaytoolList: { 'type': 'array', 'itemType': PresetPayToolInfo },
            refundSettlementId: 'string',
            presentRefundBuyerAmount: 'string',
            presentRefundDiscountAmount: 'string',
            presentRefundMdiscountAmount: 'string',
        };
    }
}
exports.AlipayTradeRefundResponse = AlipayTradeRefundResponse;
class PresetPayToolInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            assertTypeCode: 'assertTypeCode',
        };
    }
    static types() {
        return {
            amount: { 'type': 'array', 'itemType': 'string' },
            assertTypeCode: 'string',
        };
    }
}
exports.PresetPayToolInfo = PresetPayToolInfo;
class TradeFundBill extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fundChannel: 'fundChannel',
            bankCode: 'bankCode',
            amount: 'amount',
            realAmount: 'realAmount',
        };
    }
    static types() {
        return {
            fundChannel: 'string',
            bankCode: 'string',
            amount: 'string',
            realAmount: 'string',
        };
    }
}
exports.TradeFundBill = TradeFundBill;
class TradeSettleDetail extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operationType: 'operationType',
            operationSerialNo: 'operationSerialNo',
            operationDt: 'operationDt',
            transOut: 'transOut',
            transIn: 'transIn',
            amount: 'amount',
        };
    }
    static types() {
        return {
            operationType: 'string',
            operationSerialNo: 'string',
            operationDt: 'string',
            transOut: 'string',
            transIn: 'string',
            amount: 'string',
        };
    }
}
exports.TradeSettleDetail = TradeSettleDetail;
class TradeSettleInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tradeSettleDetailList: 'tradeSettleDetailList',
        };
    }
    static types() {
        return {
            tradeSettleDetailList: { 'type': 'array', 'itemType': TradeSettleDetail },
        };
    }
}
exports.TradeSettleInfo = TradeSettleInfo;
class AlipayTradeQueryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            tradeNo: 'tradeNo',
            outTradeNo: 'outTradeNo',
            buyerLogonId: 'buyerLogonId',
            tradeStatus: 'tradeStatus',
            totalAmount: 'totalAmount',
            transCurrency: 'transCurrency',
            settleCurrency: 'settleCurrency',
            settleAmount: 'settleAmount',
            payCurrency: 'payCurrency',
            payAmount: 'payAmount',
            settleTransRate: 'settleTransRate',
            transPayRate: 'transPayRate',
            buyerPayAmount: 'buyerPayAmount',
            pointAmount: 'pointAmount',
            invoiceAmount: 'invoiceAmount',
            sendPayDate: 'sendPayDate',
            receiptAmount: 'receiptAmount',
            storeId: 'storeId',
            terminalId: 'terminalId',
            fundBillList: 'fundBillList',
            storeName: 'storeName',
            buyerUserId: 'buyerUserId',
            chargeAmount: 'chargeAmount',
            chargeFlags: 'chargeFlags',
            settlementId: 'settlementId',
            tradeSettleInfo: 'tradeSettleInfo',
            authTradePayMode: 'authTradePayMode',
            buyerUserType: 'buyerUserType',
            mdiscountAmount: 'mdiscountAmount',
            discountAmount: 'discountAmount',
            buyerUserName: 'buyerUserName',
            subject: 'subject',
            body: 'body',
            alipaySubMerchantId: 'alipaySubMerchantId',
            extInfos: 'extInfos',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            tradeNo: 'string',
            outTradeNo: 'string',
            buyerLogonId: 'string',
            tradeStatus: 'string',
            totalAmount: 'string',
            transCurrency: 'string',
            settleCurrency: 'string',
            settleAmount: 'string',
            payCurrency: 'string',
            payAmount: 'string',
            settleTransRate: 'string',
            transPayRate: 'string',
            buyerPayAmount: 'string',
            pointAmount: 'string',
            invoiceAmount: 'string',
            sendPayDate: 'string',
            receiptAmount: 'string',
            storeId: 'string',
            terminalId: 'string',
            fundBillList: { 'type': 'array', 'itemType': TradeFundBill },
            storeName: 'string',
            buyerUserId: 'string',
            chargeAmount: 'string',
            chargeFlags: 'string',
            settlementId: 'string',
            tradeSettleInfo: { 'type': 'array', 'itemType': TradeSettleInfo },
            authTradePayMode: 'string',
            buyerUserType: 'string',
            mdiscountAmount: 'string',
            discountAmount: 'string',
            buyerUserName: 'string',
            subject: 'string',
            body: 'string',
            alipaySubMerchantId: 'string',
            extInfos: 'string',
        };
    }
}
exports.AlipayTradeQueryResponse = AlipayTradeQueryResponse;
class AlipayAuthTokenResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            userId: 'userId',
            accessToken: 'accessToken',
            expiresIn: 'expiresIn',
            refreshToken: 'refreshToken',
            reExpiresIn: 'reExpiresIn',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            userId: 'string',
            accessToken: 'string',
            expiresIn: 'number',
            refreshToken: 'string',
            reExpiresIn: 'number',
        };
    }
}
exports.AlipayAuthTokenResponse = AlipayAuthTokenResponse;
class Participant extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            identity: 'identity',
            identity_type: 'identity_type',
            name: 'name',
        };
    }
    static types() {
        return {
            identity: 'string',
            identity_type: 'string',
            name: 'string',
        };
    }
}
exports.Participant = Participant;
class AlipayTransferResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            outBizNo: 'outBizNo',
            orderId: 'orderId',
            payFundOrderId: 'payFundOrderId',
            status: 'status',
            transDate: 'transDate',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            outBizNo: 'string',
            orderId: 'string',
            payFundOrderId: 'string',
            status: 'string',
            transDate: 'string',
        };
    }
}
exports.AlipayTransferResponse = AlipayTransferResponse;
class AlipayTransferQueryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            orderId: 'orderId',
            payFundOrderId: 'payFundOrderId',
            outBizNo: 'outBizNo',
            transAmount: 'transAmount',
            status: 'status',
            payDate: 'payDate',
            arrivalTimeEnd: 'arrivalTimeEnd',
            orderFee: 'orderFee',
            errorCode: 'errorCode',
            failReason: 'failReason',
            deductBillInfo: 'deductBillInfo',
            transferBillInfo: 'transferBillInfo',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            orderId: 'string',
            payFundOrderId: 'string',
            outBizNo: 'string',
            transAmount: 'string',
            status: 'string',
            payDate: 'string',
            arrivalTimeEnd: 'string',
            orderFee: 'string',
            errorCode: 'string',
            failReason: 'string',
            deductBillInfo: 'string',
            transferBillInfo: 'string',
        };
    }
}
exports.AlipayTransferQueryResponse = AlipayTransferQueryResponse;
class AlipayAccountQueryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            availableAmount: 'availableAmount',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            availableAmount: 'string',
        };
    }
}
exports.AlipayAccountQueryResponse = AlipayAccountQueryResponse;
class AlipayTemplateMsgResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
        };
    }
}
exports.AlipayTemplateMsgResponse = AlipayTemplateMsgResponse;
class AlipayFundAuthFreezeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            authNo: 'authNo',
            outOrderNo: 'outOrderNo',
            operationId: 'operationId',
            outRequestNo: 'outRequestNo',
            amount: 'amount',
            status: 'status',
            payerUserId: 'payerUserId',
            gmtTrans: 'gmtTrans',
            preAuthType: 'preAuthType',
            creditAmount: 'creditAmount',
            fundAmount: 'fundAmount',
            transCurrency: 'transCurrency',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            authNo: 'string',
            outOrderNo: 'string',
            operationId: 'string',
            outRequestNo: 'string',
            amount: 'string',
            status: 'string',
            payerUserId: 'string',
            gmtTrans: 'string',
            preAuthType: 'string',
            creditAmount: 'string',
            fundAmount: 'string',
            transCurrency: 'string',
        };
    }
}
exports.AlipayFundAuthFreezeResponse = AlipayFundAuthFreezeResponse;
class AlipayFundAuthUnfreezeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            authNo: 'authNo',
            outOrderNo: 'outOrderNo',
            operationId: 'operationId',
            outRequestNo: 'outRequestNo',
            amount: 'amount',
            status: 'status',
            gmtTrans: 'gmtTrans',
            creditAmount: 'creditAmount',
            fundAmount: 'fundAmount',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            authNo: 'string',
            outOrderNo: 'string',
            operationId: 'string',
            outRequestNo: 'string',
            amount: 'string',
            status: 'string',
            gmtTrans: 'string',
            creditAmount: 'string',
            fundAmount: 'string',
        };
    }
}
exports.AlipayFundAuthUnfreezeResponse = AlipayFundAuthUnfreezeResponse;
class AlipayFundAuthCancelResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            authNo: 'authNo',
            outOrderNo: 'outOrderNo',
            operationId: 'operationId',
            outRequestNo: 'outRequestNo',
            action: 'action',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            authNo: 'string',
            outOrderNo: 'string',
            operationId: 'string',
            outRequestNo: 'string',
            action: 'string',
        };
    }
}
exports.AlipayFundAuthCancelResponse = AlipayFundAuthCancelResponse;
class VoucherDetail extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            name: 'name',
            type: 'type',
            amount: 'amount',
            merchantContribute: 'merchantContribute',
            otherContribute: 'otherContribute',
            memo: 'memo',
            templateId: 'templateId',
            purchaseBuyerContribute: 'purchaseBuyerContribute',
            purchaseMerchantContribute: 'purchaseMerchantContribute',
            purchaseAntContribute: 'purchaseAntContribute',
        };
    }
    static types() {
        return {
            id: 'string',
            name: 'string',
            type: 'string',
            amount: 'string',
            merchantContribute: 'string',
            otherContribute: 'string',
            memo: 'string',
            templateId: 'string',
            purchaseBuyerContribute: 'string',
            purchaseMerchantContribute: 'string',
            purchaseAntContribute: 'string',
        };
    }
}
exports.VoucherDetail = VoucherDetail;
class AlipayTradePayResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            tradeNo: 'tradeNo',
            outTradeNo: 'outTradeNo',
            buyerLogonId: 'buyerLogonId',
            settleAmount: 'settleAmount',
            payCurrency: 'payCurrency',
            payAmount: 'payAmount',
            settleTransRate: 'settleTransRate',
            transPayRate: 'transPayRate',
            totalAmount: 'totalAmount',
            transCurrency: 'transCurrency',
            settleCurrency: 'settleCurrency',
            receiptAmount: 'receiptAmount',
            buyerPayAmount: 'buyerPayAmount',
            pointAmount: 'pointAmount',
            invoiceAmount: 'invoiceAmount',
            gmtPayment: 'gmtPayment',
            fundBillList: 'fundBillList',
            cardBalance: 'cardBalance',
            storeName: 'storeName',
            buyerUserId: 'buyerUserId',
            discountGoodsDetail: 'discountGoodsDetail',
            voucherDetailList: 'voucherDetailList',
            advanceAmount: 'advanceAmount',
            authTradePayMode: 'authTradePayMode',
            chargeAmount: 'chargeAmount',
            chargeFlags: 'chargeFlags',
            settlementId: 'settlementId',
            businessParams: 'businessParams',
            buyerUserType: 'buyerUserType',
            mdiscountAmount: 'mdiscountAmount',
            discountAmount: 'discountAmount',
            buyerUserName: 'buyerUserName',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            tradeNo: 'string',
            outTradeNo: 'string',
            buyerLogonId: 'string',
            settleAmount: 'string',
            payCurrency: 'string',
            payAmount: 'string',
            settleTransRate: 'string',
            transPayRate: 'string',
            totalAmount: 'string',
            transCurrency: 'string',
            settleCurrency: 'string',
            receiptAmount: 'string',
            buyerPayAmount: 'string',
            pointAmount: 'string',
            invoiceAmount: 'string',
            gmtPayment: 'string',
            fundBillList: { 'type': 'array', 'itemType': TradeFundBill },
            cardBalance: 'string',
            storeName: 'string',
            buyerUserId: 'string',
            discountGoodsDetail: 'string',
            voucherDetailList: { 'type': 'array', 'itemType': VoucherDetail },
            advanceAmount: 'string',
            authTradePayMode: 'string',
            chargeAmount: 'string',
            chargeFlags: 'string',
            settlementId: 'string',
            businessParams: 'string',
            buyerUserType: 'string',
            mdiscountAmount: 'string',
            discountAmount: 'string',
            buyerUserName: 'string',
        };
    }
}
exports.AlipayTradePayResponse = AlipayTradePayResponse;
class AlipayFundAuthQueryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            authNo: 'authNo',
            outOrderNo: 'outOrderNo',
            totalFreezeAmount: 'totalFreezeAmount',
            restAmount: 'restAmount',
            totalPayAmount: 'totalPayAmount',
            orderTitle: 'orderTitle',
            payerLogonId: 'payerLogonId',
            payerUserId: 'payerUserId',
            extraParam: 'extraParam',
            operationId: 'operationId',
            outRequestNo: 'outRequestNo',
            amount: 'amount',
            operationType: 'operationType',
            status: 'status',
            remark: 'remark',
            gmtCreate: 'gmtCreate',
            gmtTrans: 'gmtTrans',
            preAuthType: 'preAuthType',
            transCurrency: 'transCurrency',
            totalFreezeCreditAmount: 'totalFreezeCreditAmount',
            totalFreezeFundAmount: 'totalFreezeFundAmount',
            totalPayCreditAmount: 'totalPayCreditAmount',
            totalPayFundAmount: 'totalPayFundAmount',
            restCreditAmount: 'restCreditAmount',
            restFundAmount: 'restFundAmount',
            creditAmount: 'creditAmount',
            fundAmount: 'fundAmount',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            authNo: 'string',
            outOrderNo: 'string',
            totalFreezeAmount: 'string',
            restAmount: 'string',
            totalPayAmount: 'string',
            orderTitle: 'string',
            payerLogonId: 'string',
            payerUserId: 'string',
            extraParam: 'string',
            operationId: 'string',
            outRequestNo: 'string',
            amount: 'string',
            operationType: 'string',
            status: 'string',
            remark: 'string',
            gmtCreate: 'string',
            gmtTrans: 'string',
            preAuthType: 'string',
            transCurrency: 'string',
            totalFreezeCreditAmount: 'string',
            totalFreezeFundAmount: 'string',
            totalPayCreditAmount: 'string',
            totalPayFundAmount: 'string',
            restCreditAmount: 'string',
            restFundAmount: 'string',
            creditAmount: 'string',
            fundAmount: 'string',
        };
    }
}
exports.AlipayFundAuthQueryResponse = AlipayFundAuthQueryResponse;
class SendSmsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            RequestId: 'RequestId',
            Code: 'Code',
            Message: 'Message',
            BizId: 'BizId',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            RequestId: 'string',
            Code: 'string',
            Message: 'string',
            BizId: 'string',
        };
    }
}
exports.SendSmsResponse = SendSmsResponse;
class SendBatchSmsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            RequestId: 'RequestId',
            Code: 'Code',
            Message: 'Message',
            BizId: 'BizId',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            RequestId: 'string',
            Code: 'string',
            Message: 'string',
            BizId: 'string',
        };
    }
}
exports.SendBatchSmsResponse = SendBatchSmsResponse;
class QuerySendDetailsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            RequestId: 'RequestId',
            Code: 'Code',
            Message: 'Message',
            TotalCount: 'TotalCount',
            SmsSendDetailDTO: 'SmsSendDetailDTO',
        };
    }
    static types() {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            RequestId: 'string',
            Code: 'string',
            Message: 'string',
            TotalCount: 'number',
            SmsSendDetailDTO: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.QuerySendDetailsResponse = QuerySendDetailsResponse;
class Client {
    constructor(config) {
        mpserverless_sdk_core_1.default.setConfig(config);
    }
    async detectContent(content) {
        let params = {
            content: content,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokeFunction("alipay.security.risk.content.detect", params), new AlipaySecurityRiskContentDetectResponse({}));
    }
    async createQrcodeUrl(urlParam, queryParam, describe) {
        let params = {
            url_param: urlParam,
            query_param: queryParam,
            describe: describe,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokeFunction("alipay.open.app.qrcode.create", params), new AlipayOpenAppQrcodeCreateResponse({}));
    }
    async userCertifyInit(outerOrderNo, bizCode, identityParam, merchantConfig) {
        let params = {
            outer_order_no: outerOrderNo,
            biz_code: bizCode,
            identity_param: identityParam,
            merchant_config: merchantConfig,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokeFunction("alipay.user.certify.open.initialize", params), new AlipayUserCertifyInitResponse({}));
    }
    async userCertify(certifyId) {
        let params = {
            certify_id: certifyId,
            pageExec: "get",
        };
        let result = await mpserverless_sdk_core_1.default.invokeFunctionWithPageExe("alipay.user.certify.open.certify", params);
        let response = {
            url: result,
        };
        return $tea.cast(response, new AlipayUserCertifyResponse({}));
    }
    async userCertifyQuery(certifyId) {
        let params = {
            certify_id: certifyId,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokeFunction("alipay.user.certify.open.query", params), new AlipayUserCertifyQueryResponse({}));
    }
    async redTransfer(params) {
        return $tea.cast(await mpserverless_sdk_core_1.default.invokePreFunction("redpacket", "alipay.fund.trans.uni.transfer", params), new CloudFunctionRedpackageResult({}));
    }
    async tradeCreate(subject, outTradeNo, totalAmount, buyerId) {
        let params = {
            subject: subject,
            out_trade_no: outTradeNo,
            total_amount: totalAmount,
            buyer_id: buyerId,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokeFunction("alipay.trade.create", params), new AlipayTradeCreateResponse({}));
    }
    async tradeRefund(outTradeNo, refundAmount, outRequestNo, refundReason) {
        let params = {
            out_trade_no: outTradeNo,
            refund_amount: refundAmount,
            out_request_no: outRequestNo,
            refund_reason: refundReason,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokeFunction("alipay.trade.refund", params), new AlipayTradeRefundResponse({}));
    }
    async tradeQuery(tradeNo) {
        let params = {
            trade_no: tradeNo,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokeFunction("alipay.trade.query", params), new AlipayTradeQueryResponse({}));
    }
    async tradeCreateWithHuabei(subject, outTradeNo, totalAmount, buyerId, huabeiConfig) {
        let params = {
            subject: subject,
            out_trade_no: outTradeNo,
            total_amount: totalAmount,
            buyer_id: buyerId,
            extend_params: huabeiConfig,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokeFunction("alipay.trade.create", params), new AlipayTradeCreateResponse({}));
    }
    async getAuthTokenWithAuthcode(code) {
        let params = {
            grant_type: "authorization_code",
            code: code,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokeFunction("alipay.system.oauth.token", params), new AlipayAuthTokenResponse({}));
    }
    async getAuthTokenWithRefreshtoken(refreshToken) {
        let params = {
            grant_type: "refresh_token",
            refresh_token: refreshToken,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokeFunction("alipay.system.oauth.token", params), new AlipayAuthTokenResponse({}));
    }
    async fundTransfer(outBizNo, transAmount, productCode, orderTitle, payee_Info) {
        let params = {
            out_biz_no: outBizNo,
            trans_amount: transAmount,
            product_code: productCode,
            payee_info: payee_Info,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokeFunction("alipay.fund.trans.uni.transfer", params), new AlipayTransferResponse({}));
    }
    async fundTransferQuery(productCode, payFundOrderId) {
        let params = {
            product_code: productCode,
            pay_fund_order_id: payFundOrderId,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokeFunction("alipay.fund.trans.common.query", params), new AlipayTransferQueryResponse({}));
    }
    async fundAccountQuery(alipayUserId) {
        let params = {
            alipay_user_id: alipayUserId,
            account_type: "ACCTRANS_ACCOUNT",
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokeFunction("alipay.fund.account.query", params), new AlipayAccountQueryResponse({}));
    }
    async sendTemplateMsg(toUserId, formId, userTemplateId, page, data) {
        let params = {
            to_user_id: toUserId,
            form_id: formId,
            user_template_id: userTemplateId,
            page: page,
            data: data,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokeFunction("alipay.open.app.mini.templatemessage.send", params), new AlipayTemplateMsgResponse({}));
    }
    async fundAuthFreeze(outOrderNo, outRequestNo, orderTitle, amount, payeeUserId) {
        let params = {
            out_order_no: outOrderNo,
            out_request_no: outRequestNo,
            order_title: orderTitle,
            amount: amount,
            product_code: "PRE_AUTH_ONLINE",
            payee_user_id: payeeUserId,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokeFunction("alipay.fund.auth.order.app.freeze", params), new AlipayFundAuthFreezeResponse({}));
    }
    async tradePay(subject, outTradeNo, totalAmount, authCode) {
        let params = {
            subject: subject,
            out_trade_no: outTradeNo,
            total_amount: totalAmount,
            auth_code: authCode,
            product_code: "PRE_AUTH_ONLINE",
            auth_confirm_mode: "COMPLETE",
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokeFunction("alipay.trade.pay", params), new AlipayTradePayResponse({}));
    }
    async fundAuthUnfreeze(authNo, outRequestNo, amount, remark) {
        let params = {
            auth_no: authNo,
            out_request_no: outRequestNo,
            amount: amount,
            remark: remark,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokeFunction("alipay.fund.auth.order.unfreeze", params), new AlipayFundAuthUnfreezeResponse({}));
    }
    async fundAuthCancel(authNo, outOrderNo, outRequestNo, remark) {
        let params = {
            auth_no: authNo,
            out_order_no: outOrderNo,
            out_request_no: outRequestNo,
            remark: remark,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokeFunction("alipay.fund.auth.operation.cancel", params), new AlipayFundAuthCancelResponse({}));
    }
    async fundAuthQuery(authNo, outOrderNo, outRequestNo) {
        let params = {
            auth_no: authNo,
            out_order_no: outOrderNo,
            out_request_no: outRequestNo,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokeFunction("alipay.fund.auth.operation.detail.query", params), new AlipayFundAuthQueryResponse({}));
    }
    async sendSms(phoneNumbers, signName, templateCode) {
        let params = {
            PhoneNumbers: phoneNumbers,
            SignName: signName,
            TemplateCode: templateCode,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokePreFunction("alicloud-dysms", "SendSms", params), new SendSmsResponse({}));
    }
    async sendBatchSms(phoneNumberJson, signNameJson, templateCode, templateParamJson) {
        let params = {
            PhoneNumberJson: phoneNumberJson,
            SignNameJson: signNameJson,
            TemplateCode: templateCode,
            TemplateParamJson: templateParamJson,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokePreFunction("alicloud-dysms", "SendBatchSms", params), new SendBatchSmsResponse({}));
    }
    async querySendDetails(phoneNumber, sendDate, pageSize, currentPage) {
        let params = {
            PhoneNumber: phoneNumber,
            SendDate: sendDate,
            PageSize: pageSize,
            CurrentPage: currentPage,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokePreFunction("alicloud-dysms", "QuerySendDetails", params), new QuerySendDetailsResponse({}));
    }
    async querySendDetailsWithBizid(phoneNumber, sendDate, pageSize, currentPage, bizId) {
        let params = {
            PhoneNumber: phoneNumber,
            SendDate: sendDate,
            PageSize: pageSize,
            CurrentPage: currentPage,
            BizId: bizId,
        };
        return $tea.cast(await mpserverless_sdk_core_1.default.invokePreFunction("alicloud-dysms", "QuerySendDetails", params), new QuerySendDetailsResponse({}));
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map