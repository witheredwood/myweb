"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var $tea = __importStar(require("@alicloud/tea-typescript"));
var TradeFundBill = /** @class */ (function (_super) {
    __extends(TradeFundBill, _super);
    function TradeFundBill(map) {
        return _super.call(this, map) || this;
    }
    TradeFundBill.names = function () {
        return {
            fundChannel: 'fundChannel',
            bankCode: 'bankCode',
            amount: 'amount',
            realAmount: 'realAmount',
        };
    };
    TradeFundBill.types = function () {
        return {
            fundChannel: 'string',
            bankCode: 'string',
            amount: 'string',
            realAmount: 'string',
        };
    };
    return TradeFundBill;
}($tea.Model));
exports.TradeFundBill = TradeFundBill;
var TradeSettleDetail = /** @class */ (function (_super) {
    __extends(TradeSettleDetail, _super);
    function TradeSettleDetail(map) {
        return _super.call(this, map) || this;
    }
    TradeSettleDetail.names = function () {
        return {
            operationType: 'operationType',
            operationSerialNo: 'operationSerialNo',
            operationDt: 'operationDt',
            transOut: 'transOut',
            transIn: 'transIn',
            amount: 'amount',
        };
    };
    TradeSettleDetail.types = function () {
        return {
            operationType: 'string',
            operationSerialNo: 'string',
            operationDt: 'string',
            transOut: 'string',
            transIn: 'string',
            amount: 'string',
        };
    };
    return TradeSettleDetail;
}($tea.Model));
exports.TradeSettleDetail = TradeSettleDetail;
var TradeSettleInfo = /** @class */ (function (_super) {
    __extends(TradeSettleInfo, _super);
    function TradeSettleInfo(map) {
        return _super.call(this, map) || this;
    }
    TradeSettleInfo.names = function () {
        return {
            tradeSettleDetailList: 'tradeSettleDetailList',
        };
    };
    TradeSettleInfo.types = function () {
        return {
            tradeSettleDetailList: { 'type': 'array', 'itemType': TradeSettleDetail },
        };
    };
    return TradeSettleInfo;
}($tea.Model));
exports.TradeSettleInfo = TradeSettleInfo;
var PresetPayToolInfo = /** @class */ (function (_super) {
    __extends(PresetPayToolInfo, _super);
    function PresetPayToolInfo(map) {
        return _super.call(this, map) || this;
    }
    PresetPayToolInfo.names = function () {
        return {
            amount: 'amount',
            assertTypeCode: 'assertTypeCode',
        };
    };
    PresetPayToolInfo.types = function () {
        return {
            amount: { 'type': 'array', 'itemType': 'string' },
            assertTypeCode: 'string',
        };
    };
    return PresetPayToolInfo;
}($tea.Model));
exports.PresetPayToolInfo = PresetPayToolInfo;
var AlipayTradeCreateResponse = /** @class */ (function (_super) {
    __extends(AlipayTradeCreateResponse, _super);
    function AlipayTradeCreateResponse(map) {
        return _super.call(this, map) || this;
    }
    AlipayTradeCreateResponse.names = function () {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            outTradeNo: 'outTradeNo',
            tradeNo: 'tradeNo',
        };
    };
    AlipayTradeCreateResponse.types = function () {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            outTradeNo: 'string',
            tradeNo: 'string',
        };
    };
    return AlipayTradeCreateResponse;
}($tea.Model));
exports.AlipayTradeCreateResponse = AlipayTradeCreateResponse;
var AlipayTradeQueryResponse = /** @class */ (function (_super) {
    __extends(AlipayTradeQueryResponse, _super);
    function AlipayTradeQueryResponse(map) {
        return _super.call(this, map) || this;
    }
    AlipayTradeQueryResponse.names = function () {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            tradeNo: 'tradeNo',
            outTradeNo: 'outTradeNo',
            buyerLogonId: 'buyerLogonId',
            tradeStatus: 'tradeStatus',
            totalAmount: 'totalAmount',
            transCurrency: 'transCurrency',
            settleCurrency: 'settleCurrency',
            settleAmount: 'settleAmount',
            payCurrency: 'payCurrency',
            payAmount: 'payAmount',
            settleTransRate: 'settleTransRate',
            transPayRate: 'transPayRate',
            buyerPayAmount: 'buyerPayAmount',
            pointAmount: 'pointAmount',
            invoiceAmount: 'invoiceAmount',
            sendPayDate: 'sendPayDate',
            receiptAmount: 'receiptAmount',
            storeId: 'storeId',
            terminalId: 'terminalId',
            fundBillList: 'fundBillList',
            storeName: 'storeName',
            buyerUserId: 'buyerUserId',
            chargeAmount: 'chargeAmount',
            chargeFlags: 'chargeFlags',
            settlementId: 'settlementId',
            tradeSettleInfo: 'tradeSettleInfo',
            authTradePayMode: 'authTradePayMode',
            buyerUserType: 'buyerUserType',
            mdiscountAmount: 'mdiscountAmount',
            discountAmount: 'discountAmount',
            buyerUserName: 'buyerUserName',
            subject: 'subject',
            body: 'body',
            alipaySubMerchantId: 'alipaySubMerchantId',
            extInfos: 'extInfos',
        };
    };
    AlipayTradeQueryResponse.types = function () {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            tradeNo: 'string',
            outTradeNo: 'string',
            buyerLogonId: 'string',
            tradeStatus: 'string',
            totalAmount: 'string',
            transCurrency: 'string',
            settleCurrency: 'string',
            settleAmount: 'string',
            payCurrency: 'string',
            payAmount: 'string',
            settleTransRate: 'string',
            transPayRate: 'string',
            buyerPayAmount: 'string',
            pointAmount: 'string',
            invoiceAmount: 'string',
            sendPayDate: 'string',
            receiptAmount: 'string',
            storeId: 'string',
            terminalId: 'string',
            fundBillList: { 'type': 'array', 'itemType': TradeFundBill },
            storeName: 'string',
            buyerUserId: 'string',
            chargeAmount: 'string',
            chargeFlags: 'string',
            settlementId: 'string',
            tradeSettleInfo: { 'type': 'array', 'itemType': TradeSettleInfo },
            authTradePayMode: 'string',
            buyerUserType: 'string',
            mdiscountAmount: 'string',
            discountAmount: 'string',
            buyerUserName: 'string',
            subject: 'string',
            body: 'string',
            alipaySubMerchantId: 'string',
            extInfos: 'string',
        };
    };
    return AlipayTradeQueryResponse;
}($tea.Model));
exports.AlipayTradeQueryResponse = AlipayTradeQueryResponse;
var AlipayTradeRefundResponse = /** @class */ (function (_super) {
    __extends(AlipayTradeRefundResponse, _super);
    function AlipayTradeRefundResponse(map) {
        return _super.call(this, map) || this;
    }
    AlipayTradeRefundResponse.names = function () {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            tradeNo: 'tradeNo',
            outTradeNo: 'outTradeNo',
            buyerLogonId: 'buyerLogonId',
            fundChange: 'fundChange',
            refundFee: 'refundFee',
            refundCurrency: 'refundCurrency',
            gmtRefundPay: 'gmtRefundPay',
            refundDetailItemList: 'refundDetailItemList',
            storeName: 'storeName',
            buyerUserId: 'buyerUserId',
            refundPresetPaytoolList: 'refundPresetPaytoolList',
            refundSettlementId: 'refundSettlementId',
            presentRefundBuyerAmount: 'presentRefundBuyerAmount',
            presentRefundDiscountAmount: 'presentRefundDiscountAmount',
            presentRefundMdiscountAmount: 'presentRefundMdiscountAmount',
        };
    };
    AlipayTradeRefundResponse.types = function () {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            tradeNo: 'string',
            outTradeNo: 'string',
            buyerLogonId: 'string',
            fundChange: 'string',
            refundFee: 'string',
            refundCurrency: 'string',
            gmtRefundPay: 'string',
            refundDetailItemList: { 'type': 'array', 'itemType': TradeFundBill },
            storeName: 'string',
            buyerUserId: 'string',
            refundPresetPaytoolList: { 'type': 'array', 'itemType': PresetPayToolInfo },
            refundSettlementId: 'string',
            presentRefundBuyerAmount: 'string',
            presentRefundDiscountAmount: 'string',
            presentRefundMdiscountAmount: 'string',
        };
    };
    return AlipayTradeRefundResponse;
}($tea.Model));
exports.AlipayTradeRefundResponse = AlipayTradeRefundResponse;
var AlipayTradeCloseResponse = /** @class */ (function (_super) {
    __extends(AlipayTradeCloseResponse, _super);
    function AlipayTradeCloseResponse(map) {
        return _super.call(this, map) || this;
    }
    AlipayTradeCloseResponse.names = function () {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            tradeNo: 'tradeNo',
            outTradeNo: 'outTradeNo',
        };
    };
    AlipayTradeCloseResponse.types = function () {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            tradeNo: 'string',
            outTradeNo: 'string',
        };
    };
    return AlipayTradeCloseResponse;
}($tea.Model));
exports.AlipayTradeCloseResponse = AlipayTradeCloseResponse;
var AlipayTradeCancelResponse = /** @class */ (function (_super) {
    __extends(AlipayTradeCancelResponse, _super);
    function AlipayTradeCancelResponse(map) {
        return _super.call(this, map) || this;
    }
    AlipayTradeCancelResponse.names = function () {
        return {
            code: 'code',
            msg: 'msg',
            subCode: 'subCode',
            subMsg: 'subMsg',
            tradeNo: 'tradeNo',
            outTradeNo: 'outTradeNo',
            retryFlag: 'retryFlag',
            action: 'action',
            gmtRefundPay: 'gmtRefundPay',
            refundSettlementId: 'refundSettlementId',
        };
    };
    AlipayTradeCancelResponse.types = function () {
        return {
            code: 'string',
            msg: 'string',
            subCode: 'string',
            subMsg: 'string',
            tradeNo: 'string',
            outTradeNo: 'string',
            retryFlag: 'string',
            action: 'string',
            gmtRefundPay: 'string',
            refundSettlementId: 'string',
        };
    };
    return AlipayTradeCancelResponse;
}($tea.Model));
exports.AlipayTradeCancelResponse = AlipayTradeCancelResponse;
var Client = /** @class */ (function () {
    function Client(_kernel) {
        this._kernel = _kernel;
    }
    Client.prototype.create = function (subject, outTradeNo, totalAmount, buyerId) {
        return __awaiter(this, void 0, void 0, function () {
            var params, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        params = {
                            subject: subject,
                            out_trade_no: outTradeNo,
                            total_amount: totalAmount,
                            buyer_id: buyerId,
                        };
                        _b = (_a = $tea).cast;
                        return [4 /*yield*/, this._kernel.invoke("alipay.trade.create", params)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent(), new AlipayTradeCreateResponse({})])];
                }
            });
        });
    };
    Client.prototype.query = function (tradeNo) {
        return __awaiter(this, void 0, void 0, function () {
            var params, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        params = {
                            trade_no: tradeNo,
                        };
                        _b = (_a = $tea).cast;
                        return [4 /*yield*/, this._kernel.invoke("alipay.trade.query", params)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent(), new AlipayTradeQueryResponse({})])];
                }
            });
        });
    };
    Client.prototype.refund = function (outTradeNo, refundAmount) {
        return __awaiter(this, void 0, void 0, function () {
            var params, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        params = {
                            out_trade_no: outTradeNo,
                            refund_amount: refundAmount,
                        };
                        _b = (_a = $tea).cast;
                        return [4 /*yield*/, this._kernel.invoke("alipay.trade.refund", params)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent(), new AlipayTradeRefundResponse({})])];
                }
            });
        });
    };
    Client.prototype.close = function (outTradeNo) {
        return __awaiter(this, void 0, void 0, function () {
            var params, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        params = {
                            out_trade_no: outTradeNo,
                        };
                        _b = (_a = $tea).cast;
                        return [4 /*yield*/, this._kernel.invoke("alipay.trade.close", params)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent(), new AlipayTradeCloseResponse({})])];
                }
            });
        });
    };
    Client.prototype.cancel = function (outTradeNo) {
        return __awaiter(this, void 0, void 0, function () {
            var params, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        params = {
                            out_trade_no: outTradeNo,
                        };
                        _b = (_a = $tea).cast;
                        return [4 /*yield*/, this._kernel.invoke("alipay.trade.cancel", params)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent(), new AlipayTradeCancelResponse({})])];
                }
            });
        });
    };
    return Client;
}());
exports.default = Client;
//# sourceMappingURL=client.js.map