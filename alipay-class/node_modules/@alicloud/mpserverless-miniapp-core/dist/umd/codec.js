"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const mpserverless_core_1 = require("@alicloud/mpserverless-core");
const core_1 = tslib_1.__importDefault(require("crypto-js/core"));
const hmac_md5_1 = tslib_1.__importDefault(require("crypto-js/hmac-md5"));
const error_1 = require("./error");
class MPHTTPRequestEncoder extends mpserverless_core_1.HTTPRequestEncoder {
    constructor(endpoint, spaceId) {
        super(endpoint);
        this.spaceId = spaceId;
        this.prefix = mpserverless_core_1.PREFIX.CLIENT;
        this.serviceHeaders = {};
        this.setBodyField({
            spaceId,
        });
    }
    sign(clientSecret) {
        const { spaceId, method, params, token, userId } = this.body;
        const timestamp = Date.now();
        this.setBodyField({
            timestamp,
        });
        let signString = '';
        const signObject = {
            spaceId,
            timestamp,
            method,
            params: JSON.stringify(params),
            token,
            userId,
        };
        Object.keys(signObject).sort().forEach(key => {
            if (signObject[key]) {
                signString = `${signString}&${key}=${signObject[key]}`;
            }
        });
        signString = signString.slice(1);
        const sign = hmac_md5_1.default(signString, clientSecret).toString(core_1.default.enc.Hex);
        this.setServerlessHeaders({ sign });
    }
    encodeAsHTTPRequestObject(additionalObject) {
        if (this.body.params) {
            this.body.params = JSON.stringify(this.body.params);
        }
        return Object.assign({ url: this.url, data: this.body, method: this.method, headers: this.headers, dataType: 'json' }, additionalObject);
    }
    clone() {
        const encoder = new MPHTTPRequestEncoder(this.endpoint, this.spaceId);
        encoder.setBodyField(this.body);
        encoder.setBaseHeaders(this.baseHeaders);
        encoder.setServerlessHeaders(this.serverlessHeaders);
        return encoder;
    }
}
exports.MPHTTPRequestEncoder = MPHTTPRequestEncoder;
class MPHTTPResponseDecoder extends mpserverless_core_1.HTTPResponseDecoder {
    constructor() {
        super(...arguments);
        this.ERROR_CODES = [11, 12, 13, 14, 19, 20];
    }
    setStatusAndBody(status, body) {
        super.setStatusAndBody(status, body);
        if (this.ERROR_CODES.indexOf(status) >= 0) {
            this._error = error_1.bizError.InterfaceRequestError(`错误码 ${status.toString()}, 请参考对应开放平台文档排查问题`);
        }
    }
    decode(res) {
        this.setHeaders(res.headers || {});
        let body = res.data || res.body;
        if (typeof body === 'string') {
            body = JSON.parse(body);
        }
        if (body && body.data) {
            if (Number(body.data.affectedDocs) === body.data.affectedDocs) {
                body = Object.assign({}, body, Object.assign({}, body.data));
            }
            else if (Object.prototype.toString.call(body.data) === '[object Object]') {
                body.result = Object.assign({}, body.data);
            }
            else if (Object.prototype.toString.call(body.data) === '[object Array]') {
                [...body.result] = body.data;
            }
            else {
                body.result = body.data;
            }
            delete body.data;
        }
        if (/^request:fail+/.test(res.errMsg)) {
            this.setErrorMessage(res.errMsg);
            return super.decode();
        }
        const responseErrorCode = parseInt(res.error, 10);
        if (responseErrorCode) {
            this.setStatusAndBody(responseErrorCode, body);
            return super.decode();
        }
        const responseErrorMessage = res.err;
        if (responseErrorMessage) {
            this.setErrorMessage(responseErrorMessage);
            return super.decode();
        }
        if (res instanceof Error) {
            this.setErrorObject(res);
            return super.decode();
        }
        if (body && typeof body.error === 'object') {
            this.setErrorObject(body.error);
            return super.decode();
        }
        const responseStatusCode = parseInt(res.status || res.statusCode, 10);
        if (responseStatusCode) {
            this.setStatusAndBody(responseStatusCode, body);
            return super.decode();
        }
        this.setStatusAndBody(200, res);
        return super.decode();
    }
}
exports.MPHTTPResponseDecoder = MPHTTPResponseDecoder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29kZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUVBT3FDO0FBQ3JDLGtFQUFvQztBQUNwQywwRUFBeUM7QUFDekMsbUNBQW1DO0FBV25DLE1BQWEsb0JBQXFCLFNBQVEsc0NBQWtCO0lBUzFELFlBQVksUUFBZ0IsRUFBWSxPQUFlO1FBQ3JELEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQURzQixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBUjdDLFdBQU0sR0FBRywwQkFBTSxDQUFDLE1BQU0sQ0FBQztRQUN2QixtQkFBYyxHQUEwQixFQUFFLENBQUM7UUFVbkQsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUNoQixPQUFPO1NBQ1IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQU1NLElBQUksQ0FBQyxZQUFvQjtRQUM5QixNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDN0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxZQUFZLENBQUM7WUFDaEIsU0FBUztTQUNWLENBQUMsQ0FBQztRQUNILElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNwQixNQUFNLFVBQVUsR0FBRztZQUNqQixPQUFPO1lBQ1AsU0FBUztZQUNULE1BQU07WUFDTixNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7WUFDOUIsS0FBSztZQUNMLE1BQU07U0FDUCxDQUFDO1FBQ0YsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDM0MsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ25CLFVBQVUsR0FBRyxH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