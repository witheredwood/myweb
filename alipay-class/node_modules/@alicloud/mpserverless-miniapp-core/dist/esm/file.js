(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@alicloud/mp-file-service", "@alicloud/mpserverless-core"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var mp_file_service_1 = require("@alicloud/mp-file-service");
    var mpserverless_core_1 = require("@alicloud/mpserverless-core");
    var HighFileSevice = (function (_super) {
        tslib_1.__extends(HighFileSevice, _super);
        function HighFileSevice(transport, options) {
            var _this = _super.call(this, transport, options) || this;
            mpserverless_core_1.assert(options.getFileUploadInfo, '[MPFileService]初始化时缺少 getFileUploadInfo 参数');
            _this.getFileUploadInfo = options.getFileUploadInfo;
            return _this;
        }
        HighFileSevice.prototype.uploadFile = function (options) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var fileInfoRes, _a, fileSize, fileExtension;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4, this.getFileUploadInfo({
                                filePath: options.filePath,
                            })];
                        case 1:
                            fileInfoRes = _b.sent();
                            _a = fileInfoRes.body, fileSize = _a.fileSize, fileExtension = _a.fileExtension;
                            if (fileSize) {
                                options.fileSize = fileSize;
                            }
                            if (fileExtension) {
                                options.extension = fileExtension;
                            }
                            return [4, _super.prototype.uploadFile.call(this, options)];
                        case 2: return [2, _b.sent()];
                    }
                });
            });
        };
        return HighFileSevice;
    }(mp_file_service_1.MPFileService));
    exports.HighFileSevice = HighFileSevice;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9maWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztJQUFBLDZEQUE2RTtJQUM3RSxpRUFBb0U7SUFFcEU7UUFBb0MsMENBQWE7UUFHL0Msd0JBQVksU0FBd0IsRUFBRSxPQUFZO1lBQWxELFlBQ0Usa0JBQU0sU0FBUyxFQUFFLE9BQU8sQ0FBQyxTQUsxQjtZQUhDLDBCQUFNLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLDRDQUE0QyxDQUFDLENBQUM7WUFFaEYsS0FBSSxDQUFDLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQzs7UUFDckQsQ0FBQztRQU1ZLG1DQUFVLEdBQXZCLFVBQXlCLE9BQTBCOzs7OztnQ0FDN0IsV0FBTSxJQUFJLENBQUMsaUJBQWlCLENBQUM7Z0NBQy9DLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUTs2QkFDM0IsQ0FBQyxFQUFBOzs0QkFGSSxXQUFXLEdBQUcsU0FFbEI7NEJBQ0ksS0FBOEIsV0FBVyxDQUFDLElBQUksRUFBNUMsUUFBUSxjQUFBLEVBQUUsYUFBYSxtQkFBQSxDQUFzQjs0QkFFckQsSUFBSSxRQUFRLEVBQUU7Z0NBQ1osT0FBTyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7NkJBQzdCOzRCQUNELElBQUksYUFBYSxFQUFFO2dDQUNqQixPQUFPLENBQUMsU0FBUyxHQUFHLGFBQWEsQ0FBQzs2QkFDbkM7NEJBRU0sV0FBTSxpQkFBTSxVQUFVLFlBQUMsT0FBTyxDQUFDLEVBQUE7Z0NBQXRDLFdBQU8sU0FBK0IsRUFBQzs7OztTQUN4QztRQUNILHFCQUFDO0lBQUQsQ0FBQyxBQTlCRCxDQUFvQywrQkFBYSxHQThCaEQ7SUE5Qlksd0NBQWMifQ==