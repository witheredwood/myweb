(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    function MPServerlessErrorClass(errorConfig, options) {
        if (options === void 0) { options = {
            code: 'MPServelessError',
            message: 'mpserverless error',
        }; }
        var error = {};
        var ErrorClass = (function (_super) {
            tslib_1.__extends(ErrorClass, _super);
            function ErrorClass(err, customMessage) {
                var _this = _super.call(this) || this;
                _this.code = options.code;
                _this.message = options.message;
                if (Error.captureStackTrace) {
                    Error.captureStackTrace(_this, ErrorClass);
                }
                if (customMessage) {
                    _this.message = _this.message + ": " + customMessage;
                }
                if (err instanceof Error) {
                    _this.message = _this.message + " << " + err.message;
                }
                else if (typeof err === 'string') {
                    _this.message = _this.message + ": " + err;
                }
                return _this;
            }
            return ErrorClass;
        }(Error));
        Object.keys(errorConfig).forEach(function (e) {
            var EKlass = (function (_super) {
                tslib_1.__extends(EKlass, _super);
                function EKlass(err, customMessage) {
                    var _this = _super.call(this, err) || this;
                    if (Error.captureStackTrace) {
                        Error.captureStackTrace(_this, EKlass);
                    }
                    _this.message = customMessage ? errorConfig[e].message + ": " + customMessage : errorConfig[e].message;
                    _this.code = errorConfig[e].code;
                    if (err instanceof Error) {
                        _this.message = _this.message + " << " + err.message;
                    }
                    else if (typeof err === 'string') {
                        _this.message = _this.message + ": " + err;
                    }
                    return _this;
                }
                EKlass.code = errorConfig[e].code;
                return EKlass;
            }(ErrorClass));
            error[e] = EKlass;
        });
        return {
            ErrorClass: ErrorClass,
            error: error,
        };
    }
    exports.MPServerlessErrorClass = MPServerlessErrorClass;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbGl0eS9lcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7SUFnQkEsU0FBZ0Isc0JBQXNCLENBQUMsV0FBaUMsRUFBRSxPQUd6RTtRQUh5RSx3QkFBQSxFQUFBO1lBQ3hFLElBQUksRUFBRSxrQkFBa0I7WUFDeEIsT0FBTyxFQUFFLG9CQUFvQjtTQUM5QjtRQUNDLElBQU0sS0FBSyxHQUVQLEVBQVMsQ0FBQztRQUVkO1lBQXlCLHNDQUFLO1lBSTVCLG9CQUFZLEdBQW9CLEVBQUUsYUFBc0I7Z0JBQXhELFlBQ0UsaUJBQU8sU0FjUjtnQkFsQkQsVUFBSSxHQUFXLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQzVCLGFBQU8sR0FBVyxPQUFPLENBQUMsT0FBTyxDQUFDO2dCQUloQyxJQUFLLEtBQWEsQ0FBQyxpQkFBaUIsRUFBRTtvQkFDcEMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLEtBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztpQkFDM0M7Z0JBRUQsSUFBSSxhQUFhLEVBQUU7b0JBQ2pCLEtBQUksQ0FBQyxPQUFPLEdBQU0sS0FBSSxDQUFDLE9BQU8sVUFBSyxhQUFlLENBQUM7aUJBQ3BEO2dCQUVELElBQUksR0FBRyxZQUFZLEtBQUssRUFBRTtvQkFDeEIsS0FBSSxDQUFDLE9BQU8sR0FBTSxLQUFJLENBQUMsT0FBTyxZQUFPLEdBQUcsQ0FBQyxPQUFTLENBQUM7aUJBQ3BEO3FCQUFNLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO29CQUNsQyxLQUFJLENBQUMsT0FBTyxHQUFNLEtBQUksQ0FBQyxPQUFPLFVBQUssR0FBSyxDQUFDO2lCQUMxQzs7WUFDSCxDQUFDO1lBQ0gsaUJBQUM7UUFBRCxDQUFDLEFBcEJELENBQXlCLEtBQUssR0FvQjdCO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO1lBQ2hDO2dCQUFxQixrQ0FBVTtnQkFHN0IsZ0JBQVksR0FBUyxFQUFFLGFBQXNCO29CQUE3QyxZQUNFLGtCQUFNLEdBQUcsQ0FBQyxTQWdCWDtvQkFkQyxJQUFLLEtBQWEsQ0FBQyxpQkFBaUIsRUFBRTt3QkFDcEMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLEtBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztxQkFDdkM7b0JBRUQsS0FBSSxDQUFDLE9BQU8sR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLFVBQUssYUFBZSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO29CQUN0RyxLQUFJLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7b0JBRWhDLElBQUksR0FBRyxZQUFZLEtBQUssRUFBRTt3QkFDeEIsS0FBSSxDQUFDLE9BQU8sR0FBTSxLQUFJLENBQUMsT0FBTyxZQUFPLEdBQUcsQ0FBQyxPQUFTLENBQUM7cUJBQ3BEO3lCQUFNLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO3dCQUNsQyxLQUFJLENBQUMsT0FBTyxHQUFNLEtBQUksQ0FBQyxPQUFPLFVBQUssR0FBSyxDQUFDO3FCQUMxQztvQkFFRCxPQUFPLEtBQUksQ0FBQztnQkFDZCxDQUFDO2dCQWxCTSxXQUFJLEdBQVcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFtQjVDLGFBQUM7YUFBQSxBQXJCRCxDQUFxQixVQUFVLEdBcUI5QjtZQUVELEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPO1lBQ0wsVUFBVSxZQUFBO1lBQ1YsS0FBSyxPQUFBO1NBQ04sQ0FBQztJQUNKLENBQUM7SUE3REQsd0RBNkRDIn0=