(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var BaseDecoder = (function () {
        function BaseDecoder() {
        }
        return BaseDecoder;
    }());
    exports.BaseDecoder = BaseDecoder;
    var HTTPResponseDecoder = (function (_super) {
        tslib_1.__extends(HTTPResponseDecoder, _super);
        function HTTPResponseDecoder() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._body = {};
            _this._headers = {};
            return _this;
        }
        HTTPResponseDecoder.prototype.setHeaders = function (headers) {
            this._headers = tslib_1.__assign(tslib_1.__assign({}, this._headers), headers);
        };
        HTTPResponseDecoder.prototype.setStatusAndBody = function (status, body) {
            this._status = status;
            this._body = body;
        };
        HTTPResponseDecoder.prototype.setErrorMessage = function (message) {
            this._error = new Error(message);
        };
        HTTPResponseDecoder.prototype.setErrorObject = function (error) {
            this._error = error;
        };
        HTTPResponseDecoder.prototype.decode = function () {
            var _ = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                _[_i] = arguments[_i];
            }
            return {
                body: this._body || {},
                error: this._error,
                status: this._status,
                headers: this._headers,
            };
        };
        return HTTPResponseDecoder;
    }(BaseDecoder));
    exports.HTTPResponseDecoder = HTTPResponseDecoder;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29kZWMvcmVzcG9uc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0lBSUE7UUFBQTtRQU9BLENBQUM7UUFBRCxrQkFBQztJQUFELENBQUMsQUFQRCxJQU9DO0lBUHFCLGtDQUFXO0lBZ0JqQztRQUF5QywrQ0FBVztRQUFwRDtZQUFBLHFFQTBEQztZQXpEVyxXQUFLLEdBQXVCLEVBQUUsQ0FBQztZQUcvQixjQUFRLEdBQTBCLEVBQUUsQ0FBQzs7UUFzRGpELENBQUM7UUEvQ1Esd0NBQVUsR0FBakIsVUFBa0IsT0FBOEI7WUFDOUMsSUFBSSxDQUFDLFFBQVEseUNBQ1IsSUFBSSxDQUFDLFFBQVEsR0FDYixPQUFPLENBQ1gsQ0FBQztRQUNKLENBQUM7UUFPTSw4Q0FBZ0IsR0FBdkIsVUFBd0IsTUFBYyxFQUFFLElBQVM7WUFDL0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7WUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDcEIsQ0FBQztRQU1NLDZDQUFlLEdBQXRCLFVBQXVCLE9BQWU7WUFDcEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuQyxDQUFDO1FBT00sNENBQWMsR0FBckIsVUFBc0IsS0FBWTtZQUNoQyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUN0QixDQUFDO1FBT00sb0NBQU0sR0FBYjtZQUFjLFdBQVc7aUJBQVgsVUFBVyxFQUFYLHFCQUFXLEVBQVgsSUFBVztnQkFBWCxzQkFBVzs7WUFDdkIsT0FBTztnQkFDTCxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFO2dCQUN0QixLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU07Z0JBQ2xCLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTztnQkFDcEIsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRO2FBQ3ZCLENBQUM7UUFDSixDQUFDO1FBQ0gsMEJBQUM7SUFBRCxDQUFDLEFBMURELENBQXlDLFdBQVcsR0EwRG5EO0lBMURZLGtEQUFtQiJ9