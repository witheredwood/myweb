(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "../constant", "../utility"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var constant_1 = require("../constant");
    var utility_1 = require("../utility");
    var BaseEncoder = (function () {
        function BaseEncoder() {
        }
        return BaseEncoder;
    }());
    exports.BaseEncoder = BaseEncoder;
    var HTTPRequestEncoder = (function (_super) {
        tslib_1.__extends(HTTPRequestEncoder, _super);
        function HTTPRequestEncoder(endpoint, prefix) {
            var _this = _super.call(this) || this;
            _this.endpoint = endpoint;
            _this.body = {};
            _this.query = {};
            _this.method = constant_1.HTTPMethod.POST;
            _this.prefix = '';
            _this.baseHeaders = {};
            _this.serviceHeaders = {};
            _this.serverlessHeaders = {};
            if (prefix) {
                _this.prefix = prefix;
            }
            return _this;
        }
        HTTPRequestEncoder.prototype.encodeAsHTTPRequestObject = function (additionalObject) {
            return {
                url: '',
                data: {},
                method: constant_1.HTTPMethod.POST,
                headers: {},
            };
        };
        HTTPRequestEncoder.prototype.sign = function (secret) { };
        Object.defineProperty(HTTPRequestEncoder.prototype, "url", {
            get: function () {
                return [
                    this.endpoint + this.prefix,
                ]
                    .filter(function (p) { return !!p; })
                    .join('?');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTTPRequestEncoder.prototype, "headers", {
            get: function () {
                var _this = this;
                var normalizedHeaders = Object
                    .keys(this.serverlessHeaders)
                    .reduce(function (accu, prop) {
                    var key = "" + constant_1.SERVERLESS_HEADER_PREFIX + utility_1.camelToLisp(prop);
                    accu[key] = _this.serverlessHeaders[prop];
                    return accu;
                }, {});
                return tslib_1.__assign(tslib_1.__assign({}, this.baseHeaders), normalizedHeaders);
            },
            enumerable: true,
            configurable: true
        });
        HTTPRequestEncoder.prototype.setBodyField = function (fields) {
            this.body = Object.assign({}, this.body, tslib_1.__assign({}, fields));
            return this;
        };
        HTTPRequestEncoder.prototype.setUserId = function (userId) {
            this.setBodyField({
                userId: userId,
            });
            return this;
        };
        HTTPRequestEncoder.prototype.setBaseHeaders = function (headers) {
            if (headers === void 0) { headers = {}; }
            this.baseHeaders = tslib_1.__assign(tslib_1.__assign({}, this.baseHeaders), Object.keys(headers).reduce(function (accu, key) {
                if (headers[key]) {
                    accu[key] = headers[key].toString();
                }
                return accu;
            }, {}));
            return this;
        };
        HTTPRequestEncoder.prototype.setServerlessHeaders = function (headers) {
            if (headers === void 0) { headers = {}; }
            this.serverlessHeaders = tslib_1.__assign(tslib_1.__assign({}, this.serverlessHeaders), Object.keys(headers).reduce(function (accu, key) {
                if (headers[key]) {
                    accu[key] = headers[key].toString();
                }
                return accu;
            }, {}));
            return this;
        };
        HTTPRequestEncoder.prototype.encode = function () {
            var _ = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                _[_i] = arguments[_i];
            }
            if (this.body.params) {
                this.body.params = JSON.stringify(this.body.params);
            }
            return {
                url: this.url,
                data: this.body,
                method: this.method,
                headers: this.headers,
            };
        };
        return HTTPRequestEncoder;
    }(BaseEncoder));
    exports.HTTPRequestEncoder = HTTPRequestEncoder;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb2RlYy9yZXF1ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztJQUNBLHdDQUEyRTtJQUMzRSxzQ0FBeUM7SUFJekM7UUFBQTtRQU9BLENBQUM7UUFBRCxrQkFBQztJQUFELENBQUMsQUFQRCxJQU9DO0lBUHFCLGtDQUFXO0lBZ0JqQztRQUF3Qyw4Q0FBVztRQVVqRCw0QkFBc0IsUUFBZ0IsRUFBRSxNQUFlO1lBQXZELFlBQ0UsaUJBQU8sU0FLUjtZQU5xQixjQUFRLEdBQVIsUUFBUSxDQUFRO1lBVC9CLFVBQUksR0FBdUIsRUFBRSxDQUFDO1lBQzlCLFdBQUssR0FBMEIsRUFBRSxDQUFDO1lBQ2xDLFlBQU0sR0FBZSxxQkFBVSxDQUFDLElBQUksQ0FBQztZQUNsQyxZQUFNLEdBQVcsRUFBRSxDQUFDO1lBQ3BCLGlCQUFXLEdBQTBCLEVBQUUsQ0FBQztZQUN4QyxvQkFBYyxHQUEwQixFQUFFLENBQUM7WUFDM0MsdUJBQWlCLEdBQTBCLEVBQUUsQ0FBQztZQU10RCxJQUFJLE1BQU0sRUFBRTtnQkFDVixLQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQzthQUN0Qjs7UUFDSCxDQUFDO1FBTU0sc0RBQXlCLEdBQWhDLFVBQWlDLGdCQUFvQztZQUNuRSxPQUFPO2dCQUNMLEdBQUcsRUFBRSxFQUFFO2dCQUNQLElBQUksRUFBRSxFQUFFO2dCQUNSLE1BQU0sRUFBRSxxQkFBVSxDQUFDLElBQUk7Z0JBQ3ZCLE9BQU8sRUFBRSxFQUFFO2FBQ1osQ0FBQztRQUNKLENBQUM7UUFNTSxpQ0FBSSxHQUFYLFVBQVksTUFBYyxJQUFTLENBQUM7UUFFcEMsc0JBQVcsbUNBQUc7aUJBQWQ7Z0JBQ0UsT0FBTztvQkFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNO2lCQUM1QjtxQkFDRSxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FB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