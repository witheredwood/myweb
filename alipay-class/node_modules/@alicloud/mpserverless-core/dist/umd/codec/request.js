"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constant_1 = require("../constant");
const utility_1 = require("../utility");
class BaseEncoder {
}
exports.BaseEncoder = BaseEncoder;
class HTTPRequestEncoder extends BaseEncoder {
    constructor(endpoint, prefix) {
        super();
        this.endpoint = endpoint;
        this.body = {};
        this.query = {};
        this.method = constant_1.HTTPMethod.POST;
        this.prefix = '';
        this.baseHeaders = {};
        this.serviceHeaders = {};
        this.serverlessHeaders = {};
        if (prefix) {
            this.prefix = prefix;
        }
    }
    encodeAsHTTPRequestObject(additionalObject) {
        return {
            url: '',
            data: {},
            method: constant_1.HTTPMethod.POST,
            headers: {},
        };
    }
    sign(secret) { }
    get url() {
        return [
            this.endpoint + this.prefix,
        ]
            .filter(p => !!p)
            .join('?');
    }
    get headers() {
        const normalizedHeaders = Object
            .keys(this.serverlessHeaders)
            .reduce((accu, prop) => {
            const key = `${constant_1.SERVERLESS_HEADER_PREFIX}${utility_1.camelToLisp(prop)}`;
            accu[key] = this.serverlessHeaders[prop];
            return accu;
        }, {});
        return Object.assign(Object.assign({}, this.baseHeaders), normalizedHeaders);
    }
    setBodyField(fields) {
        this.body = Object.assign({}, this.body, Object.assign({}, fields));
        return this;
    }
    setUserId(userId) {
        this.setBodyField({
            userId,
        });
        return this;
    }
    setBaseHeaders(headers = {}) {
        this.baseHeaders = Object.assign(Object.assign({}, this.baseHeaders), Object.keys(headers).reduce((accu, key) => {
            if (headers[key]) {
                accu[key] = headers[key].toString();
            }
            return accu;
        }, {}));
        return this;
    }
    setServerlessHeaders(headers = {}) {
        this.serverlessHeaders = Object.assign(Object.assign({}, this.serverlessHeaders), Object.keys(headers).reduce((accu, key) => {
            if (headers[key]) {
                accu[key] = headers[key].toString();
            }
            return accu;
        }, {}));
        return this;
    }
    encode(..._) {
        if (this.body.params) {
            this.body.params = JSON.stringify(this.body.params);
        }
        return {
            url: this.url,
            data: this.body,
            method: this.method,
            headers: this.headers,
        };
    }
}
exports.HTTPRequestEncoder = HTTPRequestEncoder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb2RlYy9yZXF1ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsMENBQTJFO0FBQzNFLHdDQUF5QztBQUl6QyxNQUFzQixXQUFXO0NBT2hDO0FBUEQsa0NBT0M7QUFTRCxNQUFhLGtCQUFtQixTQUFRLFdBQVc7SUFVakQsWUFBc0IsUUFBZ0IsRUFBRSxNQUFlO1FBQ3JELEtBQUssRUFBRSxDQUFDO1FBRFksYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQVQvQixTQUFJLEdBQXVCLEVBQUUsQ0FBQztRQUM5QixVQUFLLEdBQTBCLEVBQUUsQ0FBQztRQUNsQyxXQUFNLEdBQWUscUJBQVUsQ0FBQyxJQUFJLENBQUM7UUFDbEMsV0FBTSxHQUFXLEVBQUUsQ0FBQztRQUNwQixnQkFBVyxHQUEwQixFQUFFLENBQUM7UUFDeEMsbUJBQWMsR0FBMEIsRUFBRSxDQUFDO1FBQzNDLHNCQUFpQixHQUEwQixFQUFFLENBQUM7UUFNdEQsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztTQUN0QjtJQUNILENBQUM7SUFNTSx5QkFBeUIsQ0FBQyxnQkFBb0M7UUFDbkUsT0FBTztZQUNMLEdBQUcsRUFBRSxFQUFFO1lBQ1AsSUFBSSxFQUFFLEVBQUU7WUFDUixNQUFNLEVBQUUscUJBQVUsQ0FBQyxJQUFJO1lBQ3ZCLE9BQU8sRUFBRSxFQUFFO1NBQ1osQ0FBQztJQUNKLENBQUM7SUFNTSxJQUFJLENBQUMsTUFBYyxJQUFTLENBQUM7SUFFcEMsSUFBVyxHQUFHO1FBQ1osT0FBTztZQUNMLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU07U0FDNUI7YUFDRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2hCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNmLENBQUM7SUFF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